include:
  - local: '/utility/.gitlab/common.yml'

stages:
  - prepare
  - trigger
  - upload
  - cleanup
  
variables:
  REPORT_COLLECTION_DIR: /work/serv0001/.cache/ci_runner/ci_reports/$CI_PIPELINE_ID

.workaround-template:
  tags:
   - "unstable"
  when: always
  variables:
    GIT_STRATEGY: none
    CI_MODE: 'Slurm'
    SLURM_ACCOUNT: 'rwth1282'
    SLURM_CONSTRAINT: 'Rocky8'

.trigger-template:
  stage: trigger
  variables:
    COLLECTION_PIPELINE_ID: $CI_PIPELINE_ID
    REPORT_COLL_DIR: /work/serv0001/.cache/ci_runner/ci_reports/$CI_PIPELINE_ID
    _CI_SUBMOD_TRIGGER: $CI_SUBMOD_TRIGGER
    _CI_SUBMOD_COMMIT: $CI_SUBMOD_COMMIT

prepare:
  stage: prepare
  extends: .workaround-template
  script:
    - mkdir -p $REPORT_COLLECTION_DIR
    
formatting:
  stage: trigger
  needs: []
  allow_failure: true
  image: ${CI_REGISTRY_IMAGE}/ci/formatting
  script:
    - clang-format --version
    - find modules tests utility -regex '.*\.\(c\|cxx\|cpp\|cc\|h\|hxx\|hpp\|json\)' | xargs clang-format -Werror --dry-run

# cluster-minimal:
#   extends: .trigger-template
#   trigger:
#     include: '/utility/.gitlab/cluster/minimal.yml'
#     strategy: depend

cluster-extended:
  extends: .trigger-template
  trigger:
    include: '/utility/.gitlab/cluster/extended.yml'
    strategy: depend

cluster-coverage:
  extends: .trigger-template
  trigger:
    include: '/utility/.gitlab/cluster/coverage.yml'
    strategy: depend

cluster-sanitize:
  extends: .trigger-template
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" 
    - if: $CI_ENABLE_RELEASE_TESTS
    - if: $CI_ENABLE_SANITIZE_TESTS
  trigger:
    include: '/utility/.gitlab/cluster/sanitize.yml'
    strategy: depend

# apptainer:
#   extends: .trigger-template
#   trigger:
#     include: '/utility/.gitlab/apptainer.yml'
#     strategy: depend

upload:
  stage: upload
  extends: .workaround-template
  variables:
    GIT_STRATEGY: clone
  script:
    - module purge
    - module load GCC Python
    - export PATH=$HOME/.local/bin:$PATH
    - ls -alth $REPORT_COLLECTION_DIR/unit
    - echo '<?xml version="1.0" encoding="UTF-8"?>' > collection.xunit.xml
    - echo '<testsuites>' >> collection.xunit.xml
    - |
      for f in $(ls ${REPORT_COLLECTION_DIR}/unit)
      do
        grep -v -e "xml version" -e "testsuites" ${REPORT_COLLECTION_DIR}/unit/$f >> collection.xunit.xml
      done
    - echo '</testsuites>' >> collection.xunit.xml
    - mkdir coverage
    - |
      if [[ -d ${REPORT_COLLECTION_DIR}/coverage ]]; then
        git submodule sync --recursive externals
        git submodule update --init --recursive
        ls -alh ${REPORT_COLLECTION_DIR/coverage}
        gcovr --add-tracefile "${REPORT_COLLECTION_DIR}/coverage/*.json" --root . --merge-mode-functions=merge-use-line-max --print-summary --html-details=coverage/index.html --xml=cobertura.xml
      fi
  coverage: '/^lines: (.*\%)/'
  artifacts:
    when: always
    reports:
      junit: collection.xunit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${CI_PROJECT_DIR}/cobertura.xml
    paths:
      - collection.xunit.xml
      - coverage/

cleanup:
  stage: cleanup
  extends: .workaround-template
  script:
    - rm -r $REPORT_COLLECTION_DIR

