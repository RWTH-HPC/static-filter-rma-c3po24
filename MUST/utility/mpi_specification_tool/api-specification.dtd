<!--
  Part of the MUST Project, under BSD-3-Clause License
  See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!--unique-name specifies the name of this API-->
<!ELEMENT api-specification (api-headers, functions)>
<!ATTLIST api-specification
   unique-name CDATA #REQUIRED
>

<!-- List of headers for this API. -->
<!ELEMENT api-headers (header)*>

<!-- A header for this API, must be a portable name, e.g. mpi.h. -->
<!ELEMENT header (#PCDATA)>

<!-- List of functions in this API (and the analyses that may be applied to them). -->
<!ELEMENT functions (function)*>

<!--Function of the API
	"Name": specifies the name of the function.
	"return-type": the datatype returned by the function (use "void" for no type).
	"wrapp-everywhere": set this attribute to "yes" (without quotes) if this
	                    API should be wrapped on the application as well on
	                    ALL(!) tool places (Be careful not to wrapp APIs 
	                    used by the tool places to implement their own 
	                    functionality). [optional]
    "is-finalizer": set this attribute to "yes" if this call should cause a shutdown
                    of the tool once called on all application processes. [optional] 

    Rational: there is no such thing as a "is-init" option the first intercepted event
              will initialize the tool. If some communication mechanism is not yet
              available at this time a lazy initialization mechanism allows the 
              execusion to continue and events to be forwarded at a later point in time.
-->
<!ELEMENT function (function-arguments, analyses, operations)>
<!ATTLIST function
   name CDATA #REQUIRED
   return-type CDATA #REQUIRED
   wrapp-everywhere CDATA #IMPLIED
   is-finalizer CDATA #IMPLIED
>

<!--Arguments of a function.-->
<!ELEMENT function-arguments (function-argument | function-array-argument)*>

<!--Argument of a function:
	"name": Attribute name (from default header)
	"type": Type of attribute
	"intent": Optional: "in"/"out"/"inout" - helps for generation of superset wrappers and records, default is "inout"
	"order": index (starting with 0 of the argument in the call) e.g., 0 for first arg, 1 for second, ...
	"typeAfterArg": extra typestring to append after the argument name in declarations, e.g. for "int array[3]" to define the "[3]", optional, default is ""	.
	                        IMPORTANT: arguments with this extension must not be transfered, so eigther process them locally or convert them in an operation.
-->
<!ELEMENT function-argument EMPTY>
<!ATTLIST function-argument
	name CDATA #REQUIRED
	type CDATA #REQUIRED
	intent CDATA #REQUIRED
	order CDATA #REQUIRED
	typeAfterArg CDATA #IMPLIED
>
			
<!--An array argument to a function.
	"name": Attribute name (from default header)
	"type": Type of attribute
	"intent": Optional: "in"/"out"/"inout" - helps for generation of superset wrappers and records, default is "inout"
	"order": index (starting with 0 of the argument in the call) e.g., 0 for first arg, 1 for second, ...
-->
<!ELEMENT function-array-argument (length-argument)>
<!ATTLIST function-array-argument
	name CDATA #REQUIRED
	type CDATA #REQUIRED
	intent CDATA #REQUIRED
	order CDATA #REQUIRED			   
>
				
<!-- The length argument for an array argument.
	"type": either "argument" or "operation"
		- for argument specify the name of the argument that specifies the array length
		 for operation specify the name of the operation (see operations) that specifies the array length
-->
<!ELEMENT length-argument (call-arg-name | op-name)>
<!ATTLIST length-argument
	type CDATA #REQUIRED
>
				
<!-- 
   An argument name from this call
   For analysis/operation inputs you may specify:
   - "USE_CALLNAME" (without quotes) here to refer 
      to the name of the API call instead of to one of 
      its arguments.
   - "USE_CALLID" (without quotes) here to refer to 
      a unique integer (type is int (C)) that identifies
      this call, the id is built by the weaver and no 
      assumptions about its value should be made 
      except that it will b unique for all API calls. 
-->
<!ELEMENT call-arg-name (#PCDATA)>

<!--a name of a operation that can be applied to this call (see operations)
	"group": analysis group of the operation
	"id": if of the operation which is specified in the operation node for this operation
	      (used to distinguish multiple mappings of one operation to one function) 
-->
<!ELEMENT op-name (#PCDATA)>
<!ATTLIST op-name
	group CDATA #REQUIRED
	id CDATA #REQUIRED
>
				
<!--
	List of all the analyses.
	
	The analyses are executed (if multiple of them are present)
	in the specified order. Only exception is when a reduction
	is present in the list of analyses. The reduction will be executed
	first, all remaining analyses will be executed in their specified order
	afterwards.
		
-->
<!ELEMENT analyses (analysis)*>
		
<!--A single analysis:
	"group": Name of the analysis group this analysis comes from
	"name": name of this analysis (must be in the named group)
	             Syntax is: [MODULE_NAME]:[ANALYSIS_NAME]
	             (MODULE_NAME is the name of the analysis module and ANALYSIS_NAME
	              is the name of the analysis function to use)
	"order": "pre"/"post" (pre=before calling actual call, post=after calling actual call)
-->
<!ELEMENT analysis (analysis-arguments)>
<!ATTLIST analysis
	group CDATA #REQUIRED
	name CDATA #REQUIRED
	order CDATA #REQUIRED
>
			
<!-- argument list of this analysis -->
<!ELEMENT analysis-arguments (analysis-argument)*>
					
<!-- An  argument of an analysis.
	"type": "mapped"/"operation"/"operation-len" 
	    - "mapped" is an argument of the call mapped to an argument of the analysis function, 
	    - "operation" uses a process local operation to calculate some information from the inputs of the call and use it as input for the analysis
	    - "operation-len" uses an operation as for the operation type, however receives the array length return of the operation instead of the actual return value of the operation; only valid for operations that return an array
	"analysis-arg-order": Specifies which(0-N) argument of the analysis will get the value of the specified argument/operation-value
-->
<!ELEMENT analysis-argument ((call-arg-name|op-name))>
<!ATTLIST analysis-argument
	type CDATA #REQUIRED
	analysis-arg-order CDATA #REQUIRED
>
						
<!-- 
	List of all operations that can be applied to this call. 

    The operations are executed (if multiple of them are used)
	in the specified order.	
-->
<!ELEMENT operations (operation)*>
				
<!-- A single operation.
	"group": Name of the analysis group this analysis comes from
	"name": name of this analysis (must be in the named group)
	"order": "pre"/"post" (pre=before calling actual call, post=after calling actual call)
	"id": id of this mapping of the operation to the call, used to refer to a particular mapping when reading an array argument which uses an operation for its length argument 
-->
<!ELEMENT operation (operation-arguments)>
<!ATTLIST operation
	group CDATA #REQUIRED
	name CDATA #REQUIRED
	order CDATA #REQUIRED
	id CDATA #REQUIRED
>
			
<!--List of arguments needed for the operation.-->
<!ELEMENT operation-arguments (operation-argument)*>
				
<!--A single argument to an operation.
	"op-arg-order": Specifies which(0-N) argument of the operation will get the value of the specified call argument.
-->
<!ELEMENT operation-argument (call-arg-name)>
<!ATTLIST operation-argument
	op-arg-order CDATA #REQUIRED
>
					