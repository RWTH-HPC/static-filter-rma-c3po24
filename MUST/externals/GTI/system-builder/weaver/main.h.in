/* This file is part of GTI (Generic Tool Infrastructure)
 *
 * Copyright (C)
 *  2008-2019 ZIH, Technische Universitaet Dresden, Federal Republic of Germany
 *  2008-2019 Lawrence Livermore National Laboratories, United States of America
 *  2013-2019 RWTH Aachen University, Federal Republic of Germany
 *
 * See the LICENSE file in the package base directory for details
 */

/**
 * @file main.h
 * 		The main file header for the weaver component of the system builder.
 *
 * @author Tobias Hilbrich
 * @date 16.11.2010
 */

#define WEAVER_PNMPI_LIB_PATH "@CMAKE_INSTALL_PREFIX@/modules"
#define WEAVER_LD_LIBRARY_PATH "@CMAKE_INSTALL_PREFIX@/modules:@PnMPI_LIBRARY_DIR@:@MPI_C_LIB_PATHS_COLUMN@"
#define WEAVER_CMAKE_MODULES_DIR "@CMAKE_INSTALL_FULL_DATAROOTDIR@/cmake/GTI"
#define WEAVER_GTI_MODULE_PATH "@CMAKE_INSTALL_PREFIX@/modules"
#define WEAVER_BIN_DIR "@CMAKE_INSTALL_PREFIX@/bin/"
#define WEAVER_GTI_IMPLICIT_API_FILEPATH "@CMAKE_INSTALL_PREFIX@/specifications/gti-implicit-api-spec.xml"
#define WEAVER_GTI_IMPLICIT_ANALYSIS_FILEPATH "@CMAKE_INSTALL_PREFIX@/specifications/gti-implicit-analysis-spec.xml"

#define MPIEXEC "@MPIEXEC@"
#define MPIEXEC_NUMPROC_FLAG "@MPIEXEC_NUMPROC_FLAG@"
#define MPIEXEC_PREFLAGS "@MPIEXEC_PREFLAGS@"
#define MPIEXEC_POSTFLAGS "@MPIEXEC_POSTFLAGS@"

// TODO ifdef
#define WEAVER_GTI_VECTORCLOCK_API_FILEPATH "@CMAKE_INSTALL_PREFIX@/specifications/gti-vectorclock-api-spec.xml"
#define WEAVER_GTI_COLLSTRAT_API_FILEPATH "@CMAKE_INSTALL_PREFIX@/specifications/gti-collstrat-api-spec.xml"

using namespace gti;
using namespace gti::weaver;
using namespace gti::weaver::analyses;
using namespace gti::weaver::modules;
using namespace gti::weaver::calls;
using namespace gti::weaver::layout;

/**
 * Enumeration used to distinguish specification types.
 */
enum SpecificationType
{
	SPECIFICATION_GTI = 0,
	SPECIFICATION_LAYOUT,
	SPECIFICATION_ANALYSIS,
	SPECIFICATION_API,
	SPECIFICATION_UNKNOWN
};

/**
 * Checks whether given file name is a valid XML specification
 * for the weaver.
 * (just checks for existence of the file and whether it has a
 *  valid root node)
 * If requested it returns the specification type.
 * @param fileName name of the XML file.
 * @param pOutType pointer to hold type of the specification, or NULL.
 * @return true if the XML file is valid, false otherwise.
 */
bool checkXmlFile (std::string fileName, SpecificationType *pOutType);

/**
 * Prints the usage description of the weaver.
 * @param executableName name of the weaver executable.
 * @param out outstream to use for printing.
 * @return true.
 */
bool print_usage (const char *executableName, std::ostream &out);

/**
 * Creates a script that runs the wrapper and receival/forward
 * generators for all levels.
 * @param outName name of the script
 * @param wrappInOut list of input xml and output xml file names
 *                   for the wrapper generator.
 * @param recvInOut list of input xml and output xml file names
 *                   for the receival/forward generator.
 */
GTI_RETURN createGeneratorScript (
		std::string outName,
		std::list<std::pair<std::string, std::string> > wrappInOut,
		std::list<std::pair<std::string, std::string> > recvInOut);

/**
 * Creates an input XML for the build file generator tool which
 * has to be run after the generator script.
 * The build file generator will generate a build file for all
 * of the generated source files.
 * @param outName name of the input file
 * @param wrappInOut list of input xml and output xml file names
 *                   for the wrapper generator.
 * @param recvInOut list of input xml and output xml file names
 *                   for the receival/forward generator.
 */
GTI_RETURN createBuildGenInput(
		std::string outName,
		std::list<std::pair<std::string, std::string> > wrappInOut,
		std::list<std::pair<std::string, std::string> > recvInOut);
