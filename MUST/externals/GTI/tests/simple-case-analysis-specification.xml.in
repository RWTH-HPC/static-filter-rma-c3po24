<?xml version="1.0" encoding="UTF-8"?>

<!--
  This file is part of GTI (Generic Tool Infrastructure)

  Copyright (C)
    2008-2019 ZIH, Technische Universitaet Dresden, Federal Republic of Germany
    2008-2019 Lawrence Livermore National Laboratories, United States of America
    2013-2019 RWTH Aachen University, Federal Republic of Germany

  See the LICENSE file in the package base directory for details
-->

<!DOCTYPE analysis-specification SYSTEM "../system-builder/dtd/analysis-specification.dtd">
<analysis-specification path-to-libs="$HOME/lib" include-path="@PROJECT_SOURCE_DIR@/tests" group-name="simple">
	<analyses>
		<analysis name="sumAllFloats" reduction="yes">
			<registered-name>sumAllFloats</registered-name>
			<module-name>libsumAllFloats</module-name>
			<header-name>SimpleMod.h</header-name>
			<interface-type>I_SumAllFloats</interface-type>
			<is-global>0</is-global>
			<is-process-global>0</is-process-global>
			<dependencies></dependencies>
			<analysis-function name="analyse">
				<analysis-argument order="0" type="float" name="f" /></analysis-function>
		</analysis>
		<analysis name="checkArray" local-integrity="yes" sub-group="Integrity">
			<registered-name>checkArray</registered-name>
			<module-name>libcheckArray</module-name>
			<header-name>SimpleMod.h</header-name>
			<interface-type>I_CheckArray</interface-type>
			<is-global>0</is-global>
			<is-process-global>0</is-process-global>
			<dependencies></dependencies>
			<analysis-function name="analyse">
				<analysis-argument order="0" type="int" name="count"/><analysis-argument
					order="1" type="int*" name="sizes"/>
			</analysis-function>
		</analysis>
		<analysis name="handleSizes">
			<registered-name>handleSizes</registered-name>
			<module-name>libhandleSizes</module-name>
			<header-name>SimpleMod.h</header-name>
			<interface-type>I_HandleSizes</interface-type>
			<is-global>0</is-global>
			<is-process-global>0</is-process-global>
			<dependencies>
				<analysis-depend>superSumSize</analysis-depend></dependencies>
			<analysis-function name="analyse">
				<analysis-argument order="0" type="int" name="count"/><analysis-argument
					order="1" type="int*" name="sizes"></analysis-argument></analysis-function>
		    <analysis-function name="analyse2">
				<analysis-argument order="0" type="int" name="count"/></analysis-function>
		</analysis>
		<analysis name="superSumSize">
			<registered-name>superSumSize</registered-name>
			<module-name>libsuperSumSize</module-name>
			<header-name>SimpleMod.h</header-name>
			<interface-type>I_SuperSumSize</interface-type>
			<is-global>0</is-global>
			<is-process-global>0</is-process-global>
			<dependencies></dependencies>
			<analysis-function name="analyse">
				<analysis-argument order="0" type="int" name="size"/></analysis-function>
		</analysis>
		<analysis name="sumAllCounts">
			<registered-name>sumAllCounts</registered-name>
			<module-name>libSumAllCounts</module-name>
			<header-name>SimpleMod.h</header-name>
			<interface-type>I_SumAllCounts</interface-type>
			<is-global>1</is-global>
			<is-process-global>1</is-process-global>
			<dependencies></dependencies>
			<analysis-function name="analyse">
				<analysis-argument order="0" type="int" /></analysis-function>
		</analysis>
		<analysis name="printFloatSum">
			<registered-name>printFloatSum</registered-name>
			<module-name>libprintFloatSum</module-name>
			<header-name>SimpleMod.h</header-name>
			<interface-type>I_PrintFloatSum</interface-type>
			<is-global>1</is-global>
			<is-process-global>0</is-process-global>
			<dependencies></dependencies>
			<reductions>
				<analysis-depend>sumAllFloats</analysis-depend></reductions>
			<analysis-function name="analyse">
				<analysis-argument order="0" type="float" name="f" ></analysis-argument></analysis-function>
		</analysis></analyses>
	<operations>
		<operation return-type="int*" name="doubleSizes">
			<extra-headers>SimpleMod.h</extra-headers>
			<operation-arguments>
				<operation-argument order="0" type="int" name="count"/><operation-argument
					order="1" type="int*" name="sizes"/>
			</operation-arguments>
			<source-template>
int* RETURN = new int[ARG0];
for (int TEMP_RETURN = 0; TEMP_RETURN &lt; ARG0; TEMP_RETURN++)
	RETURN[TEMP_RETURN] = 2 * ARG1[TEMP_RETURN];
int RETURN_LEN = ARG0;
			</source-template>
			<cleanup-template>
delete [] RETURN;
			</cleanup-template>
			<return-is-array>int</return-is-array>
		</operation>
		<operation return-type="float" name="returnFloat">
			<extra-headers></extra-headers>
			<operation-arguments></operation-arguments>
			<source-template>float RETURN = 5;</source-template>
		</operation></operations></analysis-specification>