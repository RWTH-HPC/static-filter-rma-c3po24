<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE api-specification SYSTEM "@MUST_SPECIFICATION_DTD_PATH@/api-specification.dtd">
<api-specification unique-name="MPI">
	<api-headers><header>mpi.h</header></api-headers>
    <functions>
		@HAVE_MPI_ALLGATHER_INIT_PREFIX@
		<function name="MPI_Allgather_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ALLGATHER_INIT_POSTFIX@
		@HAVE_MPI_ALLGATHERV_INIT_PREFIX@
		<function name="MPI_Allgatherv_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="4">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="displs" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="7"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="8"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="9"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_displs" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ALLGATHERV_INIT_POSTFIX@
		@HAVE_MPI_ALLREDUCE_INIT_PREFIX@
		<function name="MPI_Allreduce_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="count" type="int" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="4"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="5"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="6"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ALLREDUCE_INIT_POSTFIX@
		@HAVE_MPI_ALLTOALL_INIT_PREFIX@
		<function name="MPI_Alltoall_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ALLTOALL_INIT_POSTFIX@
		@HAVE_MPI_ALLTOALLV_INIT_PREFIX@
		<function name="MPI_Alltoallv_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-array-argument name="sendcounts" type="const int*" intent="in" order="1">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="sdispls" type="const int*" intent="in" order="2">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="4"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="rdispls" type="const int*" intent="in" order="6">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="7"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="8"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="9"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_rdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ALLTOALLV_INIT_POSTFIX@
		@HAVE_MPI_ALLTOALLW_INIT_PREFIX@
		<function name="MPI_Alltoallw_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-array-argument name="sendcounts" type="const int*" intent="in" order="1">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="sdispls" type="const int*" intent="in" order="2">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="sendtypes" type="const MPI_Datatype*" intent="in" order="3">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="4"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="rdispls" type="const int*" intent="in" order="6">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="recvtypes" type="const MPI_Datatype*" intent="in" order="7">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="8"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="9"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatypes2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtypes</call-arg-name>
					</operation-argument>
					<operation-argument op-arg-order="1">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatypes2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtypes</call-arg-name>
					</operation-argument>
					<operation-argument op-arg-order="1">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_sendtypes" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_rdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_recvtypes" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ALLTOALLW_INIT_POSTFIX@
		@HAVE_MPI_BARRIER_INIT_PREFIX@
		<function name="MPI_Barrier_init" return-type="int">
			<function-arguments>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="0"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="1"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_BARRIER_INIT_POSTFIX@
		@HAVE_MPI_BCAST_INIT_PREFIX@
		<function name="MPI_Bcast_init" return-type="int">
			<function-arguments>
				<function-argument name="buffer" type="void*" intent="in" order="0"></function-argument>
				<function-argument name="count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="root" type="int" intent="in" order="3"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="4"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="5"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="6"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buffer" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_root" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_BCAST_INIT_POSTFIX@
        <!--TODO: Add check for multiple threads having to provide different stringtags -->
        <!--TODO: Needs a special treatment as the collective is not over the communicator but the group argument-->
		@HAVE_MPI_COMM_CREATE_FROM_GROUP_PREFIX@
		<function name="MPI_Comm_create_from_group" return-type="int">
			<function-arguments>
				<function-argument name="group" type="MPI_Group" intent="in" order="0"></function-argument>
				<function-argument name="stringtag" type="const char*" intent="in" order="1"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="2"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler" intent="in" order="3"></function-argument>
				<function-argument name="newcomm" type="MPI_Comm*" intent="out" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="pre" name="GroupChecks:warningIfEmpty" group="MUST_GroupChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_group</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertGroup2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="GroupChecks:errorIfNotKnown" group="MUST_GroupChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_group</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertGroup2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="GroupChecks:errorIfNull" group="MUST_GroupChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_group</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertGroup2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="CommTrack:commCreateFromGroup" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertGroup2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">deref_convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newcomm</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newcomm</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:enterMPICall" group="MUST_ELPBasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="ThreadSanity:leaveMPICall" group="MUST_ELPBasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation order="pre" name="getCollIdMPI_Comm_create_from_group" group="MUST_CollectiveCondition" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MPI_Base" name="convertGroup2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>group</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertErrhandler2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertComm2int" order="post" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>newcomm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_stringtag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_newcomm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_COMM_CREATE_FROM_GROUP_POSTFIX@
		@HAVE_MPI_COMM_IDUP_WITH_INFO_PREFIX@
		<function name="MPI_Comm_idup_with_info" return-type="int">
			<function-arguments>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="0"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="1"></function-argument>
				<function-argument name="newcomm" type="MPI_Comm*" intent="out" order="2"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="3"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="pre" name="CommChecks:errorIfNull" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNotKnown" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="RequestCondition:commIdup" group="MUST_RequestCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newcomm</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="4">deref_convertRequest2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_newcomm</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newcomm</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_request</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>request</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="RequestTrack:addActiveCollective" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="4">deref_convertRequest2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="CollectiveCondition:noTransfer" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Comm_dup</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_CollectiveCondition" id="1">hasRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">deref_convertRequest2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="ThreadSanity:enterMPICall" group="MUST_ELPBasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="ThreadSanity:leaveMPICall" group="MUST_ELPBasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
			    <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertComm2int" order="post" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>newcomm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_newcomm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
                <operation order="pre" name="getCollIdMPI_Comm_dup" group="MUST_CollectiveCondition" id="1">
                    <operation-arguments />
                </operation>
			</operations>
		</function>
		@HAVE_MPI_COMM_IDUP_WITH_INFO_POSTFIX@
		@HAVE_MPI_EXSCAN_INIT_PREFIX@
		<function name="MPI_Exscan_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="count" type="int" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="4"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="5"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="6"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_EXSCAN_INIT_POSTFIX@
		@HAVE_MPI_GATHER_INIT_PREFIX@
		<function name="MPI_Gather_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="root" type="int" intent="in" order="6"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="7"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="8"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="9"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_root" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_GATHER_INIT_POSTFIX@
		@HAVE_MPI_GATHERV_INIT_PREFIX@
		<function name="MPI_Gatherv_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="4">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="displs" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="root" type="int" intent="in" order="7"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="8"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="9"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_displs" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_root" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_GATHERV_INIT_POSTFIX@
		@HAVE_MPI_GROUP_FROM_SESSION_PSET_PREFIX@
		<function name="MPI_Group_from_session_pset" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="pset_name" type="const char*" intent="in" order="1"></function-argument>
				<function-argument name="newgroup" type="MPI_Group*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="deref_convertGroup2int" order="post" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>newgroup</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_pset_name" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_newgroup" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_GROUP_FROM_SESSION_PSET_POSTFIX@
		@HAVE_MPI_INFO_GET_STRING_PREFIX@
		<function name="MPI_Info_get_string" return-type="int">
			<function-arguments>
				<function-argument name="info" type="MPI_Info" intent="in" order="0"></function-argument>
				<function-argument name="key" type="const char*" intent="in" order="1"></function-argument>
				<function-argument name="buflen" type="int*" intent="inout" order="2"></function-argument>
				<function-argument name="value" type="char*" intent="out" order="3"></function-argument>
				<function-argument name="flag" type="int*" intent="out" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_key" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_buflen" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_value" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_flag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_INFO_GET_STRING_POSTFIX@
		@HAVE_MPI_INTERCOMM_CREATE_FROM_GROUPS_PREFIX@
		<function name="MPI_Intercomm_create_from_groups" return-type="int">
			<function-arguments>
				<function-argument name="local_group" type="MPI_Group" intent="in" order="0"></function-argument>
				<function-argument name="local_leader" type="int" intent="in" order="1"></function-argument>
				<function-argument name="remote_group" type="MPI_Group" intent="in" order="2"></function-argument>
				<function-argument name="remote_leader" type="int" intent="in" order="3"></function-argument>
				<function-argument name="stringtag" type="const char*" intent="in" order="4"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="5"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler" intent="in" order="6"></function-argument>
				<function-argument name="newintercomm" type="MPI_Comm*" intent="out" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertGroup2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>local_group</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertGroup2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>remote_group</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertErrhandler2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertComm2int" order="post" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>newintercomm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_local_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_local_leader" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_remote_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_remote_leader" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_stringtag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_newintercomm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_INTERCOMM_CREATE_FROM_GROUPS_POSTFIX@
		@HAVE_MPI_ISENDRECV_PREFIX@
		<function name="MPI_Isendrecv" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="dest" type="int" intent="in" order="3"></function-argument>
				<function-argument name="sendtag" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="5"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="6"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="7"></function-argument>
				<function-argument name="source" type="int" intent="in" order="8"></function-argument>
				<function-argument name="recvtag" type="int" intent="in" order="9"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="10"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="11"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="12">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_dest" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_sendtag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_source" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_recvtag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_12_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ISENDRECV_POSTFIX@
		@HAVE_MPI_ISENDRECV_REPLACE_PREFIX@
		<function name="MPI_Isendrecv_replace" return-type="int">
			<function-arguments>
				<function-argument name="buf" type="void*" intent="in" order="0"></function-argument>
				<function-argument name="count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="dest" type="int" intent="in" order="3"></function-argument>
				<function-argument name="sendtag" type="int" intent="in" order="4"></function-argument>
				<function-argument name="source" type="int" intent="in" order="5"></function-argument>
				<function-argument name="recvtag" type="int" intent="in" order="6"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_dest" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_sendtag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_source" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_recvtag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ISENDRECV_REPLACE_POSTFIX@
		@HAVE_MPI_NEIGHBOR_ALLGATHER_INIT_PREFIX@
		<function name="MPI_Neighbor_allgather_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_NEIGHBOR_ALLGATHER_INIT_POSTFIX@
		@HAVE_MPI_NEIGHBOR_ALLGATHERV_INIT_PREFIX@
		<function name="MPI_Neighbor_allgatherv_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="4">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="displs" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="7"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="8"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="9"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_displs" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_NEIGHBOR_ALLGATHERV_INIT_POSTFIX@
		@HAVE_MPI_NEIGHBOR_ALLTOALL_INIT_PREFIX@
		<function name="MPI_Neighbor_alltoall_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_NEIGHBOR_ALLTOALL_INIT_POSTFIX@
		@HAVE_MPI_NEIGHBOR_ALLTOALLV_INIT_PREFIX@
		<function name="MPI_Neighbor_alltoallv_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-array-argument name="sendcounts" type="const int*" intent="in" order="1">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="sdispls" type="const int*" intent="in" order="2">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="4"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="rdispls" type="const int*" intent="in" order="6">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="7"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="8"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="9"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_rdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_NEIGHBOR_ALLTOALLV_INIT_POSTFIX@
		@HAVE_MPI_NEIGHBOR_ALLTOALLW_INIT_PREFIX@
		<function name="MPI_Neighbor_alltoallw_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-array-argument name="sendcounts" type="const int*" intent="in" order="1">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="sdispls" type="const MPI_Aint*" intent="in" order="2">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="sendtypes" type="const MPI_Datatype*" intent="in" order="3">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="4"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="5">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="rdispls" type="const MPI_Aint*" intent="in" order="6">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="recvtypes" type="const MPI_Datatype*" intent="in" order="7">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="8"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="9"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatypes2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtypes</call-arg-name>
					</operation-argument>
					<operation-argument op-arg-order="1">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatypes2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtypes</call-arg-name>
					</operation-argument>
					<operation-argument op-arg-order="1">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_sendtypes" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_rdispls" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_recvtypes" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_NEIGHBOR_ALLTOALLW_INIT_POSTFIX@
		@HAVE_MPI_PARRIVED_PREFIX@
		<function name="MPI_Parrived" return-type="int">
			<function-arguments>
				<function-argument name="request" type="MPI_Request" intent="in" order="0"></function-argument>
				<function-argument name="partition" type="@MPI_PARRIVED_PARTITION_TYPE@" intent="in" order="1"></function-argument>
				<function-argument name="flag" type="int*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfNotPartitionedReceiveRequest" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertRequest2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertRequest2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_partition" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_flag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PARRIVED_POSTFIX@
		@HAVE_MPI_PREADY_PREFIX@
		<function name="MPI_Pready" return-type="int">
			<function-arguments>
				<function-argument name="partition" type="int" intent="in" order="0"></function-argument>
				<function-argument name="request" type="MPI_Request" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfNotPartitionedSendRequest" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="2">convertRequest2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfNotWithinRangeZeroAndPartitionCount" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="2">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partition</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfPartitionActive" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="2">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partition</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="RequestTrack:setPartitionReady" group="MUST_Resource">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="2">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partition</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertRequest2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_partition" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PREADY_POSTFIX@
		@HAVE_MPI_PREADY_LIST_PREFIX@
		<function name="MPI_Pready_list" return-type="int">
			<function-arguments>
				<function-argument name="length" type="int" intent="in" order="0"></function-argument>
				<function-array-argument name="array_of_partitions" type="@MPI_PREADY_LIST_CONSTABLE_INT_TYPE@" intent="in" order="1" @CONSTABLE_INTP_ADDITION@>
					<length-argument type="argument">
						<call-arg-name>length</call-arg-name>
					</length-argument>
				</function-array-argument>
				<function-argument name="request" type="MPI_Request" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="IntegerChecks:errorIfNegativNotProcNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_length</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>length</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="RequestChecks:errorIfNotPartitionedSendRequest" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfListNotWithinRangeZeroAndPartitionCount" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>length</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>array_of_partitions</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfPreadyListContainsDuplicates" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>length</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>array_of_partitions</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfPartitionActiveList" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>length</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>array_of_partitions</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="RequestTrack:setPartitionReadyList" group="MUST_Resource">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>array_of_partitions</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>length</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertRequest2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_length" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_array_of_partitions" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PREADY_LIST_POSTFIX@
		@HAVE_MPI_PREADY_RANGE_PREFIX@
		<function name="MPI_Pready_range" return-type="int">
			<function-arguments>
				<function-argument name="partition_low" type="int" intent="in" order="0"></function-argument>
				<function-argument name="partition_high" type="int" intent="in" order="1"></function-argument>
				<function-argument name="request" type="MPI_Request" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfNotPartitionedSendRequest" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfLbUbNotWithinRangeZeroAndPartitionCount" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partition_low</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>partition_high</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RequestChecks:errorIfPartitionActiveRange" group="MUST_RequestChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partition_low</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>partition_high</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="RequestTrack:setPartitionReadyRange" group="MUST_Resource">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="3">convertRequest2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partition_low</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>partition_high</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertRequest2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_partition_low" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_partition_high" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PREADY_RANGE_POSTFIX@
		@HAVE_MPI_PRECV_INIT_PREFIX@
		<function name="MPI_Precv_init" return-type="int">
			<function-arguments>
				<function-argument name="buf" type="void*" intent="in" order="0"></function-argument>
				<function-argument name="partitions" type="int" intent="in" order="1"></function-argument>
				<function-argument name="count" type="MPI_Count" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="source" type="int" intent="in" order="4"></function-argument>
				<function-argument name="tag" type="int" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CommChecks:errorIfGreaterEqualCommSize" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_source</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>source</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="7">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="CommChecks:errorIfNull" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="7">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="CommChecks:errorIfNotKnown" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="7">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:warningIfIsHighButLessTagUb" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_tag</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>tag</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfNotWithinRangeZeroAndLessTagUb" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_tag</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>tag</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfNegativNotProcNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_source</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>source</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfNegativNotProcNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_tag</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>tag</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="10">convertCount2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="10">convertCount2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="BasicIntegrities:errorIfNullAndNotMpiBottom" group="MUST_BasicChecks">
				<analysis-arguments>
					<analysis-argument type="operation-len" analysis-arg-order="0">
						<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
					</analysis-argument>
					<analysis-argument type="operation-len" analysis-arg-order="1">
						<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
					</analysis-argument>
					<analysis-argument type="operation" analysis-arg-order="2">
						<op-name group="MUST_Base" id="1">buildArgumentId_1_buf</op-name>
					</analysis-argument>
					<analysis-argument type="operation" analysis-arg-order="3">
						<op-name group="MPI_Base" id="10">convertCount2int</op-name>
					</analysis-argument>
					<analysis-argument type="mapped" analysis-arg-order="4">
						<call-arg-name>buf</call-arg-name>
					</analysis-argument>
				</analysis-arguments>
			</analysis>
			<analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
				<analysis-arguments>
					<analysis-argument type="operation-len" analysis-arg-order="0">
						<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
					</analysis-argument>
					<analysis-argument type="operation-len" analysis-arg-order="1">
						<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
					</analysis-argument>
					<analysis-argument type="operation" analysis-arg-order="2">
						<op-name group="MUST_Base" id="1">buildArgumentId_9_request</op-name>
					</analysis-argument>
					<analysis-argument type="mapped" analysis-arg-order="3">
						<call-arg-name>request</call-arg-name>
					</analysis-argument>
				</analysis-arguments>
			</analysis>
			<analysis order="pre" name="ThreadSanity:enterMPICall" group="MUST_ELPBasicChecks">
				<analysis-arguments>
					<analysis-argument type="operation-len" analysis-arg-order="0">
						<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
					</analysis-argument>
					<analysis-argument type="operation-len" analysis-arg-order="1">
						<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
					</analysis-argument>
				</analysis-arguments>
			</analysis>
			<analysis order="post" name="ThreadSanity:leaveMPICall" group="MUST_ELPBasicChecks">
				<analysis-arguments>
					<analysis-argument type="operation-len" analysis-arg-order="0">
						<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
					</analysis-argument>
					<analysis-argument type="operation-len" analysis-arg-order="1">
						<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
					</analysis-argument>
				</analysis-arguments>
			</analysis>
                <analysis order="post" name="RequestTrack:createPartitionedRecv" group="MUST_Resource">
                    <analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="10">convertCount2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partitions</call-arg-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="5">
							<call-arg-name>source</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="6">
							<call-arg-name>tag</call-arg-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="MPI_Base" id="7">convertComm2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="MPI_Base" id="8">convertInfo2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>buf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertCount2int" order="pre" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>count</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertInfo2int" order="pre" id="8">
						<operation-arguments>
						<operation-argument op-arg-order="0">
								<call-arg-name>info</call-arg-name>
						</operation-argument>
						</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_partitions" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_source" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_tag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PRECV_INIT_POSTFIX@
		@HAVE_MPI_PSEND_INIT_PREFIX@
		<function name="MPI_Psend_init" return-type="int">
			<function-arguments>
				<function-argument name="buf" type="@MPI_PSEND_INIT_CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="partitions" type="int" intent="in" order="1"></function-argument>
				<function-argument name="count" type="MPI_Count" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="dest" type="int" intent="in" order="4"></function-argument>
				<function-argument name="tag" type="int" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="DatatypeChecks:errorIfNotValidForCommunication" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="CommChecks:errorIfGreaterEqualCommSize" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_dest</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>dest</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="7">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="CommChecks:errorIfNull" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="7">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="CommChecks:errorIfNotKnown" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="7">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:warningIfIsHighButLessTagUb" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_tag</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>tag</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfNotWithinRangeZeroAndLessTagUb" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_tag</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>tag</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfNegativNotProcNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_dest</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>dest</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="10">convertCount2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_partitions</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>partitions</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="10">convertCount2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RequestTrack:createPartitionedSend" group="MUST_Resource">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="10">convertCount2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>partitions</call-arg-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="5">
							<call-arg-name>dest</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="6">
							<call-arg-name>tag</call-arg-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="7">
							<op-name group="MPI_Base" id="7">convertComm2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="8">
							<op-name group="MUST_Resource" id="1">getSendModeStandard</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="9">
							<op-name group="MPI_Base" id="8">convertInfo2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="10">
							<op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="OverlapChecks:isTypeOverlappedN" group="MUST_OverlapChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                         <analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="MPI_Base" id="10">convertCount2int</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="MpiTypeArt:checkSendOrRecv" group="MUST_MpiTypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                         <analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="MPI_Base" id="10">convertCount2int</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OverlapChecks:announcePSendRequest" group="MUST_OverlapChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="MPI_Base" id="10">convertCount2int</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="BasicIntegrities:errorIfNullAndNotMpiBottom" group="MUST_BasicChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MUST_Base" id="1">buildArgumentId_1_buf</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="MPI_Base" id="10">convertCount2int</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="4">
							<call-arg-name>buf</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MUST_Base" id="1">buildArgumentId_9_request</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>request</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="ThreadSanity:enterMPICall" group="MUST_ELPBasicChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="ThreadSanity:leaveMPICall" group="MUST_ELPBasicChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>buf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation order="pre" name="getSendModeStandard" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertCount2int" order="pre" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>count</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertInfo2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>info</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_buf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_partitions" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_dest" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_tag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PSEND_INIT_POSTFIX@
		@HAVE_MPI_REDUCE_INIT_PREFIX@
		<function name="MPI_Reduce_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="count" type="int" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="4"></function-argument>
				<function-argument name="root" type="int" intent="in" order="5"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="6"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_root" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_REDUCE_INIT_POSTFIX@
		@HAVE_MPI_REDUCE_SCATTER_BLOCK_INIT_PREFIX@
		<function name="MPI_Reduce_scatter_block_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="4"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="5"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="6"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_REDUCE_SCATTER_BLOCK_INIT_POSTFIX@
		@HAVE_MPI_REDUCE_SCATTER_INIT_PREFIX@
		<function name="MPI_Reduce_scatter_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="1"></function-argument>
				<function-array-argument name="recvcounts" type="const int*" intent="in" order="2">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="4"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="5"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="6"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_recvcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_REDUCE_SCATTER_INIT_POSTFIX@
		@HAVE_MPI_SCAN_INIT_PREFIX@
		<function name="MPI_Scan_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="count" type="int" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="4"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="5"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="6"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SCAN_INIT_POSTFIX@
		@HAVE_MPI_SCATTER_INIT_PREFIX@
		<function name="MPI_Scatter_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-argument name="sendcount" type="int" intent="in" order="1"></function-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="4"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="root" type="int" intent="in" order="6"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="7"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="8"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="9"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_root" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SCATTER_INIT_POSTFIX@
		@HAVE_MPI_SCATTERV_INIT_PREFIX@
		<function name="MPI_Scatterv_init" return-type="int">
			<function-arguments>
				<function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0"></function-argument>
				<function-array-argument name="sendcounts" type="const int*" intent="in" order="1">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-array-argument name="displs" type="const int*" intent="in" order="2">					<length-argument type="operation">
						<op-name group="MPI_Base" id="1">comm_size</op-name>
					</length-argument>
</function-array-argument>
				<function-argument name="sendtype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="recvbuf" type="void*" intent="in" order="4"></function-argument>
				<function-argument name="recvcount" type="int" intent="in" order="5"></function-argument>
				<function-argument name="recvtype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="root" type="int" intent="in" order="7"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="8"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="9"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="10"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="comm_size" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>comm</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>sendtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>recvtype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_sendcounts" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_displs" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_sendtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_recvbuf" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_recvcount" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_recvtype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_root" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SCATTERV_INIT_POSTFIX@
		@HAVE_MPI_SESSION_CREATE_ERRHANDLER_PREFIX@
		<function name="MPI_Session_create_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="session_errhandler_fn" type="MPI_Session_errhandler_function*" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="deref_convertErrhandler2int" order="post" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session_errhandler_fn" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_CREATE_ERRHANDLER_POSTFIX@
		@HAVE_MPI_SESSION_FINALIZE_PREFIX@
		<function name="MPI_Session_finalize" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session*" intent="inout" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_FINALIZE_POSTFIX@
		@HAVE_MPI_SESSION_GET_INFO_PREFIX@
		<function name="MPI_Session_get_info" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="info_used" type="MPI_Info*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info_used" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_GET_INFO_POSTFIX@
		@HAVE_MPI_SESSION_GET_NTH_PSET_PREFIX@
		<function name="MPI_Session_get_nth_pset" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="1"></function-argument>
				<function-argument name="n" type="int" intent="in" order="2"></function-argument>
				<function-argument name="pset_len" type="int*" intent="inout" order="3"></function-argument>
				<function-argument name="pset_name" type="char*" intent="out" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_n" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_pset_len" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_pset_name" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_GET_NTH_PSET_POSTFIX@
		@HAVE_MPI_SESSION_GET_NUM_PSETS_PREFIX@
		<function name="MPI_Session_get_num_psets" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="1"></function-argument>
				<function-argument name="npset_names" type="int*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_npset_names" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_GET_NUM_PSETS_POSTFIX@
		@HAVE_MPI_SESSION_GET_PSET_INFO_PREFIX@
		<function name="MPI_Session_get_pset_info" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="pset_name" type="const char*" intent="in" order="1"></function-argument>
				<function-argument name="info" type="MPI_Info*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_pset_name" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_GET_PSET_INFO_POSTFIX@
		@HAVE_MPI_SESSION_INIT_PREFIX@
		<function name="MPI_Session_init" return-type="int">
			<function-arguments>
				<function-argument name="info" type="MPI_Info" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler" intent="in" order="1"></function-argument>
				<function-argument name="session" type="MPI_Session*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertErrhandler2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_INIT_POSTFIX@
		@HAVE_MPI_SESSION_CALL_ERRHANDLER_PREFIX@
		<function name="MPI_Session_call_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="errorcode" type="int" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errorcode" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_CALL_ERRHANDLER_POSTFIX@
		@HAVE_MPI_SESSION_GET_ERRHANDLER_PREFIX@
		<function name="MPI_Session_get_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="deref_convertErrhandler2int" order="post" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_GET_ERRHANDLER_POSTFIX@
		@HAVE_MPI_SESSION_SET_ERRHANDLER_PREFIX@
		<function name="MPI_Session_set_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="session" type="MPI_Session" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="CollectUnmapped:collectFunction" group="MUST_CollectUnmapped">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertErrhandler2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_session" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_SESSION_SET_ERRHANDLER_POSTFIX@
	</functions>
</api-specification>
