<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE analysis-specification PUBLIC "must_base" "@MUST_SPECIFICATION_DTD_PATH@/analysis-specification.dtd">
<analysis-specification group-name="MUST_GroupChecks" include-path="" path-to-libs="@CMAKE_INSTALL_PREFIX@/modules">
    <analyses>
        <analysis name="GroupChecks">
            <registered-name>GroupChecks</registered-name>
            <module-name>libgroupChecks</module-name>
            <header-name>I_GroupChecks.h</header-name>
            <interface-type>I_GroupChecks</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">CreateMessage</analysis-depend>
                <analysis-depend group="MUST_Base">ArgumentAnalysis</analysis-depend>
                <analysis-depend group="MUST_Resource">CommTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">GroupTrack</analysis-depend>
            </dependencies>
            <analysis-function name="errorIfNotKnown">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId" >
                </analysis-argument>
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="errorIfNull">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId" >
                </analysis-argument>
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="errorIfIntegerGreaterGroupSize">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId_val" >
                </analysis-argument>
                <analysis-argument order="3" type="int" name="aId_grp" />
                <analysis-argument order="4" type="int" name="value" />
                <analysis-argument order="5" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="errorIfIntegerArrayElementGreaterGroupSize">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId_val" >
                </analysis-argument>
                <analysis-argument order="3" type="int" name="aId_grp" />
                <analysis-argument order="4" type="int*" name="array" />
                <analysis-argument order="5" type="int" name="size" />
                <analysis-argument order="6" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="errorIfRankFromRangesNotInGroup">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId_val" >
                </analysis-argument>
                <analysis-argument order="3" type="int" name="aId_grp" />
                <analysis-argument order="4" type="int*" name="array" />
                <analysis-argument order="5" type="int" name="size" />
                <analysis-argument order="6" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="warningIfEmpty">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId" >
                </analysis-argument>
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="warningIfNull">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId" >
                </analysis-argument>
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="errorRankNotInComm">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="aId_grp" >
                </analysis-argument>
                <analysis-argument order="3" type="int" name="aId_comm" />
                <analysis-argument order="4" type="@GROUP_F_TYPE@" name="group" />
                <analysis-argument order="5" type="@COMM_F_TYPE@" name="comm" />
            </analysis-function>
        </analysis>
    </analyses>
    <operations>
    </operations>
</analysis-specification>
