<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE api-specification SYSTEM "@MUST_SPECIFICATION_DTD_PATH@/api-specification.dtd">
<api-specification unique-name="MPI">
    <api-headers>
        <header>mpi.h</header>
    </api-headers>
    <functions>
        @HAVE_MPI_TYPE_CREATE_HVECTOR_PREFIX@ <function name="MPI_Type_create_hvector" return-type="int">
            <function-arguments>
                <function-argument name="count" type="int" intent="in" order="0" />
                <function-argument name="blocklength" type="int" intent="in" order="1" />
                <function-argument name="stride" type="MPI_Aint" intent="in" order="2" />
                <function-argument name="oldtype" type="MPI_Datatype" intent="in" order="3" />
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="4" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_oldtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_blocklength</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>blocklength</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_blocklength</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>blocklength</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeHvector" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>blocklength</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeChecks:warningIfNotPropperlyAligned" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>oldtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_count" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_blocklength" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_stride" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_oldtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>stride</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_HVECTOR_POSTFIX@ @HAVE_MPI_TYPE_CREATE_HINDEXED_PREFIX@ <function name="MPI_Type_create_hindexed" return-type="int">
            <function-arguments>
                <function-argument name="count" type="int" intent="in" order="0" />
                <function-array-argument name="array_of_blocklengths" type="@CONSTABLE_INTP_TYPE@" intent="in" order="1" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>count</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_displacements" type="@CONSTABLE_AINTP_TYPE@" intent="in" order="2" @CONSTABLE_AINTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>count</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="oldtype" type="MPI_Datatype" intent="in" order="3" />
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="4" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_oldtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_blocklengths</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_blocklengths</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeHindexed" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">convertAints2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeChecks:warningIfNotPropperlyAligned" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_blocklengths</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_array_of_displacements</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_displacements</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>´
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>oldtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_count" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_array_of_blocklengths" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_array_of_displacements" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_oldtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation order="pre" name="convertAints2uint64" group="MPI_Base" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>count</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>array_of_displacements</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_HINDEXED_POSTFIX@ @HAVE_MPI_TYPE_CREATE_STRUCT_PREFIX@ <function name="MPI_Type_create_struct" return-type="int">
            <function-arguments>
                <function-argument name="count" type="int" intent="in" order="0" />
                <function-array-argument name="array_of_blocklengths" type="@CONSTABLE_INTP_TYPE@" intent="in" order="1" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>count</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_displacements" type="@CONSTABLE_AINTP_TYPE@" intent="in" order="2" @CONSTABLE_AINTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>count</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_types" type="@CONSTABLE_DATATYPEP_TYPE@" intent="in" order="3" @CONSTABLE_DATATYPEP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>count</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="4" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_blocklengths</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_blocklengths</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfArrayNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_array_of_types</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatypes2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeStruct" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">convertAints2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatypes2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeChecks:warningIfNotPropperlyAligned" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_blocklengths</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_blocklengths</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_array_of_displacements</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_displacements</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_array_of_types</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_types</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatypes2int" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>array_of_types</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>count</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_count" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_array_of_blocklengths" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_array_of_displacements" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_array_of_types" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation order="pre" name="convertAints2uint64" group="MPI_Base" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>count</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>array_of_displacements</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_STRUCT_POSTFIX@ @HAVE_MPI_TYPE_CREATE_RESIZED_PREFIX@ <function name="MPI_Type_create_resized" return-type="int">
            <function-arguments>
                <function-argument name="oldtype" type="MPI_Datatype" intent="in" order="0" />
                <function-argument name="lb" type="MPI_Aint" intent="in" order="1" />
                <function-argument name="extent" type="MPI_Aint" intent="in" order="2" />
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="3" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_oldtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_extent</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>extent</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_extent</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>extent</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeResized" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>oldtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_oldtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_lb" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_extent" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>lb</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="2">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>extent</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_RESIZED_POSTFIX@ @HAVE_MPI_TYPE_CREATE_INDEXED_BLOCK_PREFIX@ <function name="MPI_Type_create_indexed_block" return-type="int">
            <function-arguments>
                <function-argument name="count" type="int" intent="in" order="0" />
                <function-argument name="blocklength" type="int" intent="in" order="1" />
                <function-array-argument name="array_of_displacements" type="@CONSTABLE_INTP_TYPE@" intent="in" order="2" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>count</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="oldtype" type="MPI_Datatype" intent="in" order="3" />
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="4" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_oldtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_blocklength</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>blocklength</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_blocklength</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>blocklength</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeIndexedBlock" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>blocklength</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>array_of_displacements</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_array_of_displacements</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_displacements</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>oldtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_count" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_blocklength" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_array_of_displacements" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_oldtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_INDEXED_BLOCK_POSTFIX@ @HAVE_MPI_TYPE_CREATE_SUBARRAY_PREFIX@ <function name="MPI_Type_create_subarray" return-type="int">
            <function-arguments>
                <function-argument name="ndims" type="int" intent="in" order="0" />
                <function-array-argument name="array_of_sizes" type="@CONSTABLE_INTP_TYPE@" intent="in" order="1" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_subsizes" type="@CONSTABLE_INTP_TYPE@" intent="in" order="2" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_starts" type="@CONSTABLE_INTP_TYPE@" intent="in" order="3" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="order" type="int" intent="in" order="4" />
                <function-argument name="oldtype" type="MPI_Datatype" intent="in" order="5" />
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="6" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_oldtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeSubarray" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_sizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>array_of_subsizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>array_of_starts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="6">
                            <call-arg-name>order</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="7">
                            <op-name group="MPI_Base" id="6">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                @HAVE_MPI_TYPE_CREATE_SUBARRAY_POSTFIX@ <!-- TODO: should be errorIfLessEqualZeroArray for all arrays: -->
                @HAVE_MPI_TYPE_CREATE_SUBARRAY_PREFIX@ <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_sizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_sizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_array_of_subsizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_subsizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_array_of_starts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_starts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_array_of_sizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_sizes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_array_of_subsizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_subsizes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_array_of_starts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_starts</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>oldtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_ndims" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_array_of_sizes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_array_of_subsizes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_array_of_starts" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_order" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_6_oldtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_7_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_SUBARRAY_POSTFIX@ @HAVE_MPI_TYPE_CREATE_DARRAY_PREFIX@ <function name="MPI_Type_create_darray" return-type="int">
            <function-arguments>
                <function-argument name="size" type="int" intent="in" order="0" />
                <function-argument name="rank" type="int" intent="in" order="1" />
                <function-argument name="ndims" type="int" intent="in" order="2" />
                <function-array-argument name="array_of_gsizes" type="@CONSTABLE_INTP_TYPE@" intent="in" order="3" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_distribs" type="@CONSTABLE_INTP_TYPE@" intent="in" order="4" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_dargs" type="@CONSTABLE_INTP_TYPE@" intent="in" order="5" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_psizes" type="@CONSTABLE_INTP_TYPE@" intent="in" order="6" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="argument">
                        <call-arg-name>ndims</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="order" type="int" intent="in" order="7" />
                <function-argument name="oldtype" type="MPI_Datatype" intent="in" order="8" />
                <function-argument name="newtype" type="MPI_Datatype*" intent="out" order="9" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_9_oldtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:typeDarray" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>size</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>array_of_gsizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="6">
                            <call-arg-name>array_of_distribs</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>array_of_dargs</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="8">
                            <call-arg-name>array_of_psizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="9">
                            <call-arg-name>order</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MPI_Base" id="9">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="11">
                            <op-name group="MPI_Base" id="10">deref_convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                @HAVE_MPI_TYPE_CREATE_DARRAY_POSTFIX@ <!-- TODO: distribs / dargs -->
                <!-- TODO: should be errorIfLessEqualZeroArray for all arrays: -->
                @HAVE_MPI_TYPE_CREATE_DARRAY_PREFIX@ <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_array_of_gsizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_gsizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_array_of_psizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_psizes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>ndims</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_array_of_gsizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_gsizes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_array_of_distribs</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_distribs</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_array_of_dargs</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_dargs</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_array_of_psizes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>array_of_psizes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_10_newtype</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>newtype</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="9">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>oldtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="deref_convertDatatype2int" order="post" id="10">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>newtype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_size" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_rank" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_ndims" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_array_of_gsizes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_array_of_distribs" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_6_array_of_dargs" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_7_array_of_psizes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_8_order" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_9_oldtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_10_newtype" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_CREATE_DARRAY_POSTFIX@ @HAVE_MPI_TYPE_GET_ENVELOPE_PREFIX@ <function name="MPI_Type_get_envelope" return-type="int">
            <function-arguments>
                <function-argument name="datatype" type="MPI_Datatype" intent="in" order="0" />
                <function-argument name="num_integers" type="int*" intent="out" order="1" />
                <function-argument name="num_addresses" type="int*" intent="out" order="2" />
                <function-argument name="num_datatypes" type="int*" intent="out" order="3" />
                <function-argument name="combiner" type="int*" intent="out" order="4" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_num_integers</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>num_integers</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_num_addresses</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>num_addresses</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_num_datatypes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>num_datatypes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_combiner</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>combiner</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>datatype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_datatype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_num_integers" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_num_addresses" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_num_datatypes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_combiner" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_GET_ENVELOPE_POSTFIX@ @HAVE_MPI_TYPE_GET_CONTENTS_PREFIX@ <function name="MPI_Type_get_contents" return-type="int">
            <function-arguments>
                <function-argument name="datatype" type="MPI_Datatype" intent="in" order="0" />
                <function-argument name="max_integers" type="int" intent="in" order="1" />
                <function-argument name="max_addresses" type="int" intent="in" order="2" />
                <function-argument name="max_datatypes" type="int" intent="in" order="3" />
                <function-array-argument name="array_of_integers" type="int*" intent="out" order="4">
                    <length-argument type="argument">
                        <call-arg-name>max_integers</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_addresses" type="MPI_Aint*" intent="out" order="5">
                    <length-argument type="argument">
                        <call-arg-name>max_addresses</call-arg-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="array_of_datatypes" type="MPI_Datatype*" intent="out" order="6">
                    <length-argument type="argument">
                        <call-arg-name>max_datatypes</call-arg-name>
                    </length-argument>
                </function-array-argument>
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullCondition" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_array_of_integers</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>max_integers</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>array_of_integers</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullCondition" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_array_of_addresses</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>max_addresses</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>array_of_addresses</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullCondition" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_array_of_datatypes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>max_datatypes</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>array_of_datatypes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="DatatypeTrack:contents" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>datatype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_datatype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_array_of_integers" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_6_array_of_addresses" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_7_array_of_datatypes" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_GET_CONTENTS_POSTFIX@ @HAVE_MPI_TYPE_GET_EXTENT_PREFIX@ <function name="MPI_Type_get_extent" return-type="int">
            <function-arguments>
                <function-argument name="datatype" type="MPI_Datatype" intent="in" order="0" />
                <function-argument name="lb" type="MPI_Aint*" intent="out" order="1" />
                <function-argument name="extent" type="MPI_Aint*" intent="out" order="2" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_lb</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>lb</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_extent</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>extent</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>datatype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_datatype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_lb" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_extent" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_GET_EXTENT_POSTFIX@ @HAVE_MPI_TYPE_GET_TRUE_EXTENT_PREFIX@ <function name="MPI_Type_get_true_extent" return-type="int">
            <function-arguments>
                <function-argument name="datatype" type="MPI_Datatype" intent="in" order="0" />
                <function-argument name="true_lb" type="MPI_Aint*" intent="out" order="1" />
                <function-argument name="true_extent" type="MPI_Aint*" intent="out" order="2" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCreate" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_true_lb</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>true_lb</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_true_extent</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>true_extent</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>datatype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_datatype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_true_lb" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_true_extent" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_TYPE_GET_TRUE_EXTENT_POSTFIX@ @HAVE_MPI_ALLTOALLW_PREFIX@ <function name="MPI_Alltoallw" return-type="int">
            <function-arguments>
                <function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0" />
                <function-array-argument name="sendcounts" type="@CONSTABLE_INTP_TYPE@" intent="in" order="1" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="operation">
                        <op-name group="MPI_Base" id="1">comm_size</op-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="sdispls" type="@CONSTABLE_INTP_TYPE@" intent="in" order="2" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="operation">
                        <op-name group="MPI_Base" id="1">comm_size</op-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="sendtypes" type="@CONSTABLE_DATATYPEP_TYPE@" intent="in" order="3" @CONSTABLE_DATATYPEP_ADDITION@>
                    <length-argument type="operation">
                        <op-name group="MPI_Base" id="1">comm_size</op-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="recvbuf" type="void*" intent="in" order="4" />
                <function-array-argument name="recvcounts" type="@CONSTABLE_INTP_TYPE@" intent="in" order="5" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="operation">
                        <op-name group="MPI_Base" id="1">comm_size</op-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="rdispls" type="@CONSTABLE_INTP_TYPE@" intent="in" order="6" @CONSTABLE_INTP_ADDITION@>
                    <length-argument type="operation">
                        <op-name group="MPI_Base" id="1">comm_size</op-name>
                    </length-argument>
                </function-array-argument>
                <function-array-argument name="recvtypes" type="@CONSTABLE_DATATYPEP_TYPE@" intent="in" order="7" @CONSTABLE_DATATYPEP_ADDITION@>
                    <length-argument type="operation">
                        <op-name group="MPI_Base" id="1">comm_size</op-name>
                    </length-argument>
                </function-array-argument>
                <function-argument name="comm" type="MPI_Comm" intent="in" order="8" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfArrayNotValidForCommunication" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_sendtypes</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatypes2intForComm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfArrayNotValidForCommunication" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_8_recvtypes</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="8">convertDatatypes2intForComm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfIsIntercommMPI1" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_9_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:warningIfIsIntercommMPI2" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_9_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNull" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_9_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNotKnown" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_9_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_sendcounts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sendcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_sdispls</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sdispls</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_recvcounts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_rdispls</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>rdispls</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_sendcounts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sendcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZeroArray" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_recvcounts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="1">comm_size</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullCommSize" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_sdispls</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>sdispls</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullCommSize" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_7_rdispls</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>rdispls</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullAndNotMpiBottomConditionCommSize" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_sendbuf</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sendcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>sendbuf</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullAndNotMpiBottomConditionCommSize" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_recvbuf</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>recvbuf</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_sendtypes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sendtypes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_8_recvtypes</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvtypes</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_sendcounts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sendcounts</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_recvcounts</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvcounts</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:alltoallw" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>sendcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>sdispls</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatypes2intForComm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>recvcounts</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="8">
                            <call-arg-name>rdispls</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertDatatypes2intForComm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MPI_Base" id="9">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="11">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="12">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>sendbuf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>recvbuf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="comm_size" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertDatatypes2intForComm" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>sendtypes</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertDatatypes2intForComm" order="pre" id="8">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>recvtypes</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertComm2int" order="pre" id="9">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_sendcounts" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_sdispls" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_sendtypes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_recvbuf" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_6_recvcounts" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_7_rdispls" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_8_recvtypes" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_9_comm" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_ALLTOALLW_POSTFIX@ @HAVE_MPI_EXSCAN_PREFIX@ 
        <function name="MPI_Exscan" return-type="int">
            <function-arguments>
                <function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0" />
                <function-argument name="recvbuf" type="void*" intent="in" order="1" />
                <function-argument name="count" type="int" intent="in" order="2" />
                <function-argument name="datatype" type="MPI_Datatype" intent="in" order="3" />
                <function-argument name="op" type="MPI_Op" intent="in" order="4" />
                <function-argument name="comm" type="MPI_Comm" intent="in" order="5" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:exscan" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">convertOp2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="7">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OperationChecks:errorIfNotKnown" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_op</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">convertOp2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OperationChecks:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_op</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">convertOp2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCommunication" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfIsIntercommMPI1" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:warningIfIsIntercommMPI2" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNull" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNotKnown" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_count</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullAndNotMpiBottom" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_1_sendbuf</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>sendbuf</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="BasicIntegrities:errorIfNullAndNotMpiBottom" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_2_recvbuf</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>recvbuf</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>sendbuf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="2">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>recvbuf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>datatype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>op</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_count" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_EXSCAN_POSTFIX@ @HAVE_MPI_REDUCE_SCATTER_BLOCK_PREFIX@
        <function name="MPI_Reduce_scatter_block" return-type="int">
            <function-arguments>
                <function-argument name="sendbuf" type="@CONSTABLE_VOIDP_TYPE@" intent="in" order="0" />
                <function-argument name="recvbuf" type="void*" intent="in" order="1" />
                <function-argument name="recvcount" type="int" intent="in" order="2" />
                <function-argument name="datatype" type="MPI_Datatype" intent="in" order="3" />
                <function-argument name="op" type="MPI_Op" intent="in" order="4" />
                <function-argument name="comm" type="MPI_Comm" intent="in" order="5" />
            </function-arguments>
            <analyses>
                <analysis order="pre" name="InitParallelId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="InitLocationId:init" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="1">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:reduce_scatter_block" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>recvcount</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="5">convertOp2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="7">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OperationChecks:errorIfNotKnown" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_op</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">convertOp2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OperationChecks:errorIfNull" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_5_op</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">convertOp2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="DatatypeChecks:errorIfNotValidForCommunication" group="MUST_DatatypeChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_4_datatype</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertDatatype2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfIsIntercommMPI1" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:warningIfIsIntercommMPI2" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNull" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CommChecks:errorIfNotKnown" group="MUST_CommChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_6_comm</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="6">convertComm2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:errorIfLessThanZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_recvcount</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvcount</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="IntegerChecks:warningIfZero" group="MUST_BasicChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Base" id="1">buildArgumentId_3_recvcount</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>recvcount</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="OpenMPsanity:enterMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="OpenMPsanity:leaveMPICall" group="OpenMPsanity" enabled="@SPEC_OMPT_FOUND@">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
             </analyses>
            <operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>sendbuf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="2">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>recvbuf</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="comm_size" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>datatype</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertOp2int" order="pre" id="5">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>op</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertComm2int" order="pre" id="6">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>comm</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>USE_CALLNAME</call-arg-name>
                        </operation-argument>
                        <operation-argument op-arg-order="1">
                            <call-arg-name>USE_CALLID</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_1_sendbuf" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_2_recvbuf" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_3_recvcount" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_5_op" order="pre" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_Base" name="buildArgumentId_6_comm" order="pre" id="1">
                    <operation-arguments />
                </operation>
            </operations>
        </function>
        @HAVE_MPI_REDUCE_SCATTER_BLOCK_POSTFIX@
    </functions>
</api-specification>
