<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE analysis-specification PUBLIC "must_base" "@MUST_SPECIFICATION_DTD_PATH@/analysis-specification.dtd">
<analysis-specification group-name="MUST_Resource" include-path="" path-to-libs="@CMAKE_INSTALL_PREFIX@/modules">
    <analyses>
        <analysis name="RequestTrack">
            <registered-name>RequestTrack</registered-name>
            <module-name>librequestTrack</module-name>
            <header-name>I_RequestTrack.h</header-name>
            <interface-type>I_RequestTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Resource">DatatypeTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">CommTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">BaseConstants</analysis-depend>
            </dependencies>
            <analysis-function name="createPersistentSend">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="4" type="int" name="dest" />
                <analysis-argument order="5" type="int" name="tag" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="7" type="int" name="sendMode" />
                <analysis-argument order="8" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="createPersistentRecv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="4" type="int" name="source" />
                <analysis-argument order="5" type="int" name="tag" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="7" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="createPartitionedSend">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="uint64_t" name="count" />
                <analysis-argument order="3" type="int" name="numPartitions" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="5" type="int" name="dest" />
                <analysis-argument order="6" type="int" name="tag" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="int" name="sendMode" />
                <analysis-argument order="9" type="@INFO_F_TYPE@" name="infoHandle" />
                <analysis-argument order="10" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="createPartitionedRecv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="uint64_t" name="count" />
                <analysis-argument order="3" type="int" name="numPartitions" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="5" type="int" name="source" />
                <analysis-argument order="6" type="int" name="tag" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="@INFO_F_TYPE@" name="infoHandle" />
                <analysis-argument order="9" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="setPartitionReady">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
                <analysis-argument order="3" type="int" name="partition" />
            </analysis-function>
            <analysis-function name="setPartitionReadyRange">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
                <analysis-argument order="3" type="int" name="partition_low" />
                <analysis-argument order="4" type="int" name="partition_high" />
            </analysis-function>
            <analysis-function name="setPartitionReadyList">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
                <analysis-argument order="3" type="const int[]" name="array_of_partitions" />
                <analysis-argument order="4" type="int" name="length" />
            </analysis-function>
            <analysis-function name="cancel">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="addActive">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="isSend" >
                </analysis-argument>
                <analysis-argument order="3" type="@REQUEST_F_TYPE@" name="request" />
                <analysis-argument order="4" type="int" name="destSource" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addActiveCollective">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="forceFree">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="startPersistent">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="startPersistentArray">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@*" name="requests" />
                <analysis-argument order="3" type="int" name="count" />
            </analysis-function>
            <analysis-function name="complete">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
                <analysis-argument order="3" type="int" name="flag" />
            </analysis-function>
            <analysis-function name="completeAny">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@*" name="requests" />
                <analysis-argument order="3" type="int" name="count" />
                <analysis-argument order="4" type="int" name="index" />
                <analysis-argument order="5" type="int" name="flag" />
            </analysis-function>
            <analysis-function name="completeArray">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@*" name="requests" />
                <analysis-argument order="3" type="int" name="count" />
                <analysis-argument order="4" type="int" name="flag" />
            </analysis-function>
            <analysis-function name="completeSome">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@*" name="requests" />
                <analysis-argument order="3" type="int" name="count" />
                <analysis-argument order="4" type="int*" name="indices" />
                <analysis-argument order="5" type="int" name="numIndices" />
            </analysis-function>
            <analysis-function name="addPredefineds">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@REQUEST_F_TYPE@" name="requestNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@REQUEST_F_TYPE@*" name="predefinedValues" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addRemoteRequest">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle" />
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="requestHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="int" name="isActive" />
                <analysis-argument order="5" type="int" name="isPersistent" />
                <analysis-argument order="6" type="int" name="isSend" >
                </analysis-argument>
                <analysis-argument order="7" type="int" name="isNull" />
                <analysis-argument order="8" type="int" name="isCanceled" />
                <analysis-argument order="9" type="int" name="isProcNull" />
                <analysis-argument order="10" type="int" name="count" />
                <analysis-argument order="11" type="uint64_t" name="datatype" />
                <analysis-argument order="12" type="int" name="tag" />
                <analysis-argument order="13" type="uint64_t" name="comm" />
                <analysis-argument order="14" type="int" name="destSource" />
                <analysis-argument order="15" type="int" name="sendMode" >
                </analysis-argument>
                <analysis-argument order="16" type="uint64_t" name="creationPId" />
                <analysis-argument order="17" type="uint64_t" name="activationPId" />
                <analysis-argument order="18" type="uint64_t" name="cancelPId" />
                <analysis-argument order="19" type="uint64_t" name="creationLId" >
                </analysis-argument>
                <analysis-argument order="20" type="uint64_t" name="activationLId" >
                </analysis-argument>
                <analysis-argument order="21" type="uint64_t" name="cancelLId" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="freeRemoteRequest">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId" />
            </analysis-function>
        </analysis>
        <analysis name="PersistentRequestTrack">
            <registered-name>PersistentRequestTrack</registered-name>
            <module-name>librequestTrack</module-name>
            <header-name>I_RequestTrack.h</header-name>
            <interface-type>I_RequestTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Resource">DatatypeTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">CommTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">BaseConstants</analysis-depend>
            </dependencies>
            <analysis-function name="createPersistentSend">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="4" type="int" name="dest" />
                <analysis-argument order="5" type="int" name="tag" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="7" type="int" name="sendMode" />
                <analysis-argument order="8" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="createPersistentRecv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="4" type="int" name="source" />
                <analysis-argument order="5" type="int" name="tag" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="7" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="cancel">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="forceFree">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="startPersistent">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="startPersistentArray">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@REQUEST_F_TYPE@*" name="requests" />
                <analysis-argument order="3" type="int" name="count" />
            </analysis-function>
            <analysis-function name="addPredefineds">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@REQUEST_F_TYPE@" name="requestNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@REQUEST_F_TYPE@*" name="predefinedValues" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addRemoteRequest">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle" />
                <analysis-argument order="2" type="@REQUEST_F_TYPE@" name="requestHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="int" name="isActive" />
                <analysis-argument order="5" type="int" name="isPersistent" />
                <analysis-argument order="6" type="int" name="isSend" >
                </analysis-argument>
                <analysis-argument order="7" type="int" name="isNull" />
                <analysis-argument order="8" type="int" name="isCanceled" />
                <analysis-argument order="9" type="int" name="isProcNull" />
                <analysis-argument order="10" type="int" name="count" />
                <analysis-argument order="11" type="uint64_t" name="datatype" />
                <analysis-argument order="12" type="int" name="tag" />
                <analysis-argument order="13" type="uint64_t" name="comm" />
                <analysis-argument order="14" type="int" name="destSource" />
                <analysis-argument order="15" type="int" name="sendMode" >
                </analysis-argument>
                <analysis-argument order="16" type="uint64_t" name="creationPId" />
                <analysis-argument order="17" type="uint64_t" name="activationPId" />
                <analysis-argument order="18" type="uint64_t" name="cancelPId" />
                <analysis-argument order="19" type="uint64_t" name="creationLId" >
                </analysis-argument>
                <analysis-argument order="20" type="uint64_t" name="activationLId" >
                </analysis-argument>
                <analysis-argument order="21" type="uint64_t" name="cancelLId" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="freeRemoteRequest">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId" />
            </analysis-function>
        </analysis>
        <analysis name="WinTrack">
            <registered-name>WinTrack</registered-name>
            <module-name>libwinTrack</module-name>
            <header-name>I_WinTrack.h</header-name>
            <interface-type>I_WinTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Resource">DatatypeTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">CommTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">BaseConstants</analysis-depend>
            </dependencies>
            <analysis-function name="addWin">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" /> 
                <analysis-argument order="2" type="int" name="kind" />
                <analysis-argument order="3" type="int" name="memoryModel" />
                <analysis-argument order="4" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="5" type="void*" name="baseptr" />
                <analysis-argument order="6" type="int" name="size" />
                <analysis-argument order="7" type="int" name="disp_unit" />
                <analysis-argument order="8" type="@WIN_F_TYPE@" name="win" />
            </analysis-function>
            <analysis-function name="attachWin">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" /> 
                <analysis-argument order="2" type="@AINT_TYPE@" name="base" />
                <analysis-argument order="3" type="int" name="size" />
                <analysis-argument order="4" type="@WIN_F_TYPE@" name="win" />
            </analysis-function>
            <analysis-function name="detachWin">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" /> 
                <analysis-argument order="2" type="@AINT_TYPE@" name="base" />
                <analysis-argument order="3" type="@WIN_F_TYPE@" name="win" />
            </analysis-function>
            <analysis-function name="freeWin">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" /> 
                <analysis-argument order="2" type="@WIN_F_TYPE@" name="win" />
            </analysis-function>
            <analysis-function name="addRemoteWin">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle" />
                <analysis-argument order="2" type="@WIN_F_TYPE@" name="winHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="int" name="kind" />
                <analysis-argument order="5" type="int" name="memoryModel" />
                <analysis-argument order="6" type="uint64_t" name="commId" />
                <analysis-argument order="7" type="@AINT_TYPE@" name="base" />
                <analysis-argument order="8" type="int" name="dispUnit" />
                <analysis-argument order="9" type="unsigned long long" name="contextId" />
                <analysis-argument order="10" type="uint64_t" name="creationPId" />
                <analysis-argument order="11" type="uint64_t" name="creationLId" />
            </analysis-function>
            <analysis-function name="freeRemoteWin">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId">
                </analysis-argument>
            </analysis-function>
        </analysis>
        <analysis name="DatatypeTrack">
            <registered-name>DatatypeTrack</registered-name>
            <module-name>libdatatypeTrack</module-name>
            <header-name>I_DatatypeTrack.h</header-name>
            <interface-type>I_DatatypeTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Resource">BaseConstants</analysis-depend>
            </dependencies>
            <analysis-function name="contents">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="type" />
            </analysis-function>
            <analysis-function name="commit">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="type" />
            </analysis-function>
            <analysis-function name="free">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="type" />
            </analysis-function>
            <analysis-function name="typeDup">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="3" type="@DATATYPE_F_TYPE@" name="newType" />
            </analysis-function>
            <analysis-function name="typeContiguous">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="newType" />
            </analysis-function>
            <analysis-function name="typeHindexed">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="int*" name="arrayOfBlocklengths" />
                <analysis-argument order="4" type="@AINT_TYPE@*" name="arrayOfDisplacements" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="6" type="@DATATYPE_F_TYPE@" name="newType" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeIndexed">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="int*" name="arrayOfBlocklengths" />
                <analysis-argument order="4" type="int*" name="arrayOfDisplacements" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="6" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeHvector">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="int" name="blocklength" />
                <analysis-argument order="4" type="@AINT_TYPE@" name="stride" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="6" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeVector">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="int" name="blocklength" />
                <analysis-argument order="4" type="int" name="stride" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="6" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeStruct">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="int*" name="arrayOfBlocklengths" />
                <analysis-argument order="4" type="@AINT_TYPE@*" name="arrayOfDisplacements" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@*" name="oldTypes" />
                <analysis-argument order="6" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeIndexedBlock">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="count" />
                <analysis-argument order="3" type="int" name="blocklength" />
                <analysis-argument order="4" type="int*" name="arrayOfDisplacements" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="6" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeResized">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="@AINT_TYPE@" name="lb" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="extent" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeSubarray">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="ndims" />
                <analysis-argument order="3" type="int*" name="arrayOfSizes" />
                <analysis-argument order="4" type="int*" name="arrayOfSubsizes" />
                <analysis-argument order="5" type="int*" name="arrayOfStarts" />
                <analysis-argument order="6" type="int" name="order" />
                <analysis-argument order="7" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="8" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="typeDarray">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="int" name="size" />
                <analysis-argument order="3" type="int" name="rank" />
                <analysis-argument order="4" type="int" name="ndims" />
                <analysis-argument order="5" type="int*" name="arrayOfGsizes" />
                <analysis-argument order="6" type="int*" name="arrayOfDistribs" />
                <analysis-argument order="7" type="int*" name="arrayOfDargs" />
                <analysis-argument order="8" type="int*" name="arrayOfPsizes" />
                <analysis-argument order="9" type="int" name="order" />
                <analysis-argument order="10" type="@DATATYPE_F_TYPE@" name="oldType" />
                <analysis-argument order="11" type="@DATATYPE_F_TYPE@" name="newType">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addPredefinedTypes">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@DATATYPE_F_TYPE@" name="datatypeNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@*" name="predefinedValues" >
                </analysis-argument>
                <analysis-argument order="5" type="@AINT_TYPE@*" name="extents">
                </analysis-argument>
                <analysis-argument order="6" type="int*" name="alignments">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="freeRemoteDatatype">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addRemoteDatatypePredefined">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="int" name="isOptional" />
                <analysis-argument order="5" type="int" name="isForReduction" />
                <analysis-argument order="6" type="int" name="isBoundMarker" />
                <analysis-argument order="7" type="int" name="isNull" />
                <analysis-argument order="8" type="int" name="isC" />
                <analysis-argument order="9" type="int" name="isFortran" />
                <analysis-argument order="10" type="int" name="hasExplicitLb" />
                <analysis-argument order="11" type="int" name="hasExplicitUb" />
                <analysis-argument order="12" type="int" name="predefValue" />
                <analysis-argument order="13" type="@AINT_TYPE@" name="extent" />
                <analysis-argument order="14" type="int" name="alignment" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeDup">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeContiguous">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count" >
                </analysis-argument>
                <analysis-argument order="10" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeVector">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count" />
                <analysis-argument order="10" type="int" name="blocklength" />
                <analysis-argument order="11" type="int" name="stride" />
                <analysis-argument order="12" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeHvector">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count">
                </analysis-argument>
                <analysis-argument order="10" type="int" name="blocklength">
                </analysis-argument>
                <analysis-argument order="11" type="@AINT_TYPE@" name="stride">
                </analysis-argument>
                <analysis-argument order="12" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeIndexed">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count">
                </analysis-argument>
                <analysis-argument order="10" type="int*" name="blocklengths">
                </analysis-argument>
                <analysis-argument order="11" type="int*" name="displacements">
                </analysis-argument>
                <analysis-argument order="12" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeHindexed">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count">
                </analysis-argument>
                <analysis-argument order="10" type="int*" name="blocklengths">
                </analysis-argument>
                <analysis-argument order="11" type="@AINT_TYPE@*" name="displacements">
                </analysis-argument>
                <analysis-argument order="12" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeStruct">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count">
                </analysis-argument>
                <analysis-argument order="10" type="int*" name="blocklengths">
                </analysis-argument>
                <analysis-argument order="11" type="@AINT_TYPE@*" name="displacements">
                </analysis-argument>
                <analysis-argument order="12" type="uint64_t*" name="baseTypes" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeIndexedBlock">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="count">
                </analysis-argument>
                <analysis-argument order="10" type="int" name="blocklength">
                </analysis-argument>
                <analysis-argument order="11" type="int*" name="displacements">
                </analysis-argument>
                <analysis-argument order="12" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeResized">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="@AINT_TYPE@" name="lb">
                </analysis-argument>
                <analysis-argument order="10" type="@AINT_TYPE@" name="extent">
                </analysis-argument>
                <analysis-argument order="11" type="uint64_t" name="baseType" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addRemoteDatatypeSubarray">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="ndims">
                </analysis-argument>
                <analysis-argument order="10" type="int*" name="sizes">
                </analysis-argument>
                <analysis-argument order="11" type="int*" name="subsizes">
                </analysis-argument>
                <analysis-argument order="12" type="int*" name="starts">
                </analysis-argument>
                <analysis-argument order="13" type="int" name="order">
                </analysis-argument>
                <analysis-argument order="14" type="uint64_t" name="baseType" />
            </analysis-function>
            <analysis-function name="addRemoteDatatypeDarray">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle">
                </analysis-argument>
                <analysis-argument order="2" type="@DATATYPE_F_TYPE@" name="typeHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="uint64_t" name="creationPId" />
                <analysis-argument order="5" type="uint64_t" name="creationLId" />
                <analysis-argument order="6" type="int" name="isCommited" />
                <analysis-argument order="7" type="uint64_t" name="commitPId" />
                <analysis-argument order="8" type="uint64_t" name="commitLId" />
                <analysis-argument order="9" type="int" name="commSize">
                </analysis-argument>
                <analysis-argument order="10" type="int" name="commRank">
                </analysis-argument>
                <analysis-argument order="11" type="int" name="ndims">
                </analysis-argument>
                <analysis-argument order="12" type="int*" name="gsizes">
                </analysis-argument>
                <analysis-argument order="13" type="int*" name="distribs">
                </analysis-argument>
                <analysis-argument order="14" type="int*" name="dargs">
                </analysis-argument>
                <analysis-argument order="15" type="int*" name="psizes">
                </analysis-argument>
                <analysis-argument order="16" type="int" name="order">
                </analysis-argument>
                <analysis-argument order="17" type="uint64_t" name="baseType" />
            </analysis-function>
        </analysis>
        <analysis name="DatatypePredefs" local-integrity="yes">
            <registered-name>DatatypePredefs</registered-name>
            <module-name>libdatatypePredefs</module-name>
            <header-name>I_DatatypePredefs.h</header-name>
            <interface-type>I_DatatypePredefs</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <analysis-function name="propagate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
            </analysis-function>
        </analysis>
        <analysis name="CommTrack">
            <registered-name>CommTrack</registered-name>
            <module-name>libcommTrack</module-name>
            <header-name>I_CommTrack.h</header-name>
            <interface-type>I_CommTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend>GroupTrack</analysis-depend>
            </dependencies>
            <reductions>
                <analysis-depend>CommReduction</analysis-depend>
            </reductions>
            <analysis-function name="addPredefinedComms" needs-channel-id="yes">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="int" name="reachableBegin" />
                <analysis-argument order="2" type="int" name="reachableEnd" />
                <analysis-argument order="3" type="int" name="worldSize" >
                </analysis-argument>
                <analysis-argument order="4" type="@COMM_F_TYPE@" name="commNull" />
                <analysis-argument order="5" type="@COMM_F_TYPE@" name="commSelf" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="commWorld" />
                <analysis-argument order="7" type="int" name="numWorlds" />
                <analysis-argument order="8" type="@COMM_F_TYPE@*" name="worlds" />
                <analysis-argument order="9" type="int" name="numSelfs" />
                <analysis-argument order="10" type="@COMM_F_TYPE@*" name="selfs" />
            </analysis-function>
            <analysis-function name="commGroup">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" />
            </analysis-function>
            <analysis-function name="commCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" />
                <analysis-argument order="4" type="@COMM_F_TYPE@" name="newcomm" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="commCreateFromGroup">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="group" />
                <analysis-argument order="3" type="@COMM_F_TYPE@" name="newcomm" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="commDup">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="3" type="@COMM_F_TYPE@" name="newcomm" />
            </analysis-function>
            <analysis-function name="commFree">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="comm" />
            </analysis-function>
            <analysis-function name="commSplit">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="3" type="int" name="color" />
                <analysis-argument order="4" type="int" name="key" />
                <analysis-argument order="5" type="@COMM_F_TYPE@" name="newcomm">
                </analysis-argument>
                <analysis-argument order="6" type="int" name="newCommSize" />
                <analysis-argument order="7" type="int*" name="newRank2WorldArray" />
            </analysis-function>
            <analysis-function name="graphCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="commOld" />
                <analysis-argument order="3" type="int" name="nnodes" />
                <analysis-argument order="4" type="int" name="nedges" />
                <analysis-argument order="5" type="int*" name="indices" />
                <analysis-argument order="6" type="int*" name="edges" />
                <analysis-argument order="7" type="int" name="reorder" />
                <analysis-argument order="8" type="@COMM_F_TYPE@" name="commGraph">
                </analysis-argument>
                <analysis-argument order="9" type="int" name="newCommSize" />
                <analysis-argument order="10" type="int*" name="newRank2WorldArray" />
            </analysis-function>
            <analysis-function name="distGraphCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="commOld" />
                <analysis-argument order="3" type="@COMM_F_TYPE@" name="commGraph">
                </analysis-argument>
                <analysis-argument order="4" type="int" name="newCommSize" />
                <analysis-argument order="5" type="int*" name="newRank2WorldArray" />
            </analysis-function>
            <analysis-function name="cartCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="commOld" />
                <analysis-argument order="3" type="int" name="ndims" />
                <analysis-argument order="4" type="int*" name="dims" />
                <analysis-argument order="5" type="int*" name="periods" />
                <analysis-argument order="6" type="int" name="reorder" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="commCart">
                </analysis-argument>
                <analysis-argument order="8" type="int" name="newCommSize" />
                <analysis-argument order="9" type="int*" name="newRank2WorldArray" />
            </analysis-function>
            <analysis-function name="cartSub">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="commOld" />
                <analysis-argument order="3" type="int" name="ndims" />
                <analysis-argument order="4" type="int*" name="remain" />
                <analysis-argument order="5" type="@COMM_F_TYPE@" name="commCart" />
                <analysis-argument order="6" type="int" name="newCommSize" />
                <analysis-argument order="7" type="int*" name="newRank2WorldArray" />
            </analysis-function>
            <analysis-function name="intercommCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="local_comm" />
                <analysis-argument order="3" type="int" name="local_leader" >
                </analysis-argument>
                <analysis-argument order="4" type="@COMM_F_TYPE@" name="peer_comm" />
                <analysis-argument order="5" type="int" name="remote_leader" />
                <analysis-argument order="6" type="int" name="tag" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="newintercomm">
                </analysis-argument>
                <analysis-argument order="8" type="int" name="newRemoteGroupSize" />
                <analysis-argument order="9" type="int*" name="newRemoteRank2WorldArray" >
                </analysis-argument>
                <analysis-argument order="10" type="int" name="contextId">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="intercommMerge">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="intercomm" />
                <analysis-argument order="3" type="int" name="high">
                </analysis-argument>
                <analysis-argument order="4" type="@COMM_F_TYPE@" name="newintracomm">
                </analysis-argument>
                <analysis-argument order="5" type="int" name="newCommSize" >
                </analysis-argument>
                <analysis-argument order="6" type="int*" name="newRank2WorldArray">
                </analysis-argument>
            </analysis-function>
            <analysis-function name="commRemoteGroup">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addRemoteComm">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="int" name="hasHandle" />
                <analysis-argument order="2" type="@COMM_F_TYPE@" name="commHandle" />
                <analysis-argument order="3" type="uint64_t" name="remoteId" />
                <analysis-argument order="4" type="int" name="isNull" />
                <analysis-argument order="5" type="int" name="isPredefined" />
                <analysis-argument order="6" type="int" name="predefinedEnum" />
                <analysis-argument order="7" type="int" name="isCartesian" />
                <analysis-argument order="8" type="int" name="isGraph" />
                <analysis-argument order="9" type="int" name="isIntercomm" />
                <analysis-argument order="10" type="unsigned long long" name="contextId" />
                <analysis-argument order="11" type="uint64_t" name="groupTableId" />
                <analysis-argument order="12" type="uint64_t" name="groupTableIdRemte" />
                <analysis-argument order="13" type="uint64_t" name="creationPId" />
                <analysis-argument order="14" type="uint64_t" name="creationLId" />
                <analysis-argument order="15" type="int" name="reorder" />
                <analysis-argument order="16" type="int" name="ndims" />
                <analysis-argument order="17" type="int*" name="dims" />
                <analysis-argument order="18" type="int*" name="periods" />
                <analysis-argument order="19" type="int" name="nnodes" />
                <analysis-argument order="20" type="int" name="nedges" />
                <analysis-argument order="21" type="int*" name="indices" />
                <analysis-argument order="22" type="int*" name="edges" />
            </analysis-function>
            <analysis-function name="freeRemoteComm">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId" />
            </analysis-function>
        </analysis>
        <analysis name="CommPredefs" local-integrity="yes">
            <registered-name>CommPredefs</registered-name>
            <module-name>libcommPredefs</module-name>
            <header-name>I_CommPredefs.h</header-name>
            <interface-type>I_CommPredefs</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="propagate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
            </analysis-function>
        </analysis>
        <analysis name="CommReduction" reduction="yes">
            <registered-name>CommReduction</registered-name>
            <module-name>libcommReduction</module-name>
            <header-name>I_CommReduction.h</header-name>
            <interface-type>I_CommReduction</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="reduce">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="int" name="reachableBegin" />
                <analysis-argument order="2" type="int" name="reachableEnd" />
                <analysis-argument order="3" type="int" name="worldSize" />
                <analysis-argument order="4" type="@COMM_F_TYPE@" name="commNull" />
                <analysis-argument order="5" type="@COMM_F_TYPE@" name="commSelf" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="commWorld" />
                <analysis-argument order="7" type="int" name="numWorlds" />
                <analysis-argument order="8" type="@COMM_F_TYPE@*" name="worlds" />
                <analysis-argument order="9" type="int" name="numSelfs" />
                <analysis-argument order="10" type="@COMM_F_TYPE@*" name="selfs" />
            </analysis-function>
        </analysis>
        <analysis name="GroupTrack">
            <registered-name>GroupTrack</registered-name>
            <module-name>libgroupTrack</module-name>
            <header-name>I_GroupTrack.h</header-name>
            <interface-type>I_GroupTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend soft="yes">CommTrack</analysis-depend>
            </dependencies>
            <analysis-function name="groupUnion">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="group1" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group2" />
                <analysis-argument order="4" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupIntersection">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="group1" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group2" />
                <analysis-argument order="4" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupDifference">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="group1" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="group2" />
                <analysis-argument order="4" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupIncl">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="oldGroup" />
                <analysis-argument order="3" type="int" name="n" />
                <analysis-argument order="4" type="int*" name="ranks" />
                <analysis-argument order="5" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupExcl">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="oldGroup" />
                <analysis-argument order="3" type="int" name="n" />
                <analysis-argument order="4" type="int*" name="ranks" />
                <analysis-argument order="5" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupRangeIncl">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="oldGroup" >
                </analysis-argument>
                <analysis-argument order="3" type="int" name="n" />
                <analysis-argument order="4" type="int*" name="ranges" />
                <analysis-argument order="5" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupRangeExcl">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="oldGroup" />
                <analysis-argument order="3" type="int" name="n" />
                <analysis-argument order="4" type="int*" name="ranges" />
                <analysis-argument order="5" type="@GROUP_F_TYPE@" name="newGroup" />
            </analysis-function>
            <analysis-function name="groupFree">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@GROUP_F_TYPE@" name="group" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="addPredefineds">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@GROUP_F_TYPE@" name="groupNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@GROUP_F_TYPE@*" name="predefinedValues" />
            </analysis-function>
            <analysis-function name="addRemoteGroupTableRep2">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId" />
                <analysis-argument order="2" type="int" name="size" />
                <analysis-argument order="3" type="int*" name="translation" />
            </analysis-function>
            <analysis-function name="addRemoteGroupTableRep1">
                <analysis-argument order="0" type="int" name="rank" />
                <analysis-argument order="1" type="uint64_t" name="remoteId" />
                <analysis-argument order="2" type="int" name="beginRank" />
                <analysis-argument order="3" type="int" name="endRank" />
            </analysis-function>
            <analysis-function name="freeRemoteGroupTable">
                <analysis-argument order="0" type="int" name="rank" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="remoteId" />
            </analysis-function>
        </analysis>
        <analysis name="BaseConstants">
            <registered-name>BaseConstants</registered-name>
            <module-name>libbaseConstants</module-name>
            <header-name>I_BaseConstants.h</header-name>
            <interface-type>I_BaseConstants</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="addConstants">
                <analysis-argument order="0" type="int" name="mpiProcNull" />
                <analysis-argument order="1" type="int" name="mpiAnySource" >
                </analysis-argument>
                <analysis-argument order="2" type="int" name="mpiAnyTag">
                </analysis-argument>
                <analysis-argument order="3" type="int" name="mpiUndefined" />
                <analysis-argument order="4" type="int" name="mpiBsendOverhead" />
                <analysis-argument order="5" type="int" name="mpiTagUb" />
                <analysis-argument order="6" type="int" name="mpiVersion" />
                <analysis-argument order="7" type="int" name="mpiSubversion" />
                <analysis-argument order="8" type="int" name="mpiDistributeBlock" />
                <analysis-argument order="9" type="int" name="mpiDistributeCyclic" />
                <analysis-argument order="10" type="int" name="mpiDistributeNone" />
                <analysis-argument order="11" type="int" name="mpiDistributeDefautDarg" />
                <analysis-argument order="12" type="int" name="mpiOrderC" />
                <analysis-argument order="13" type="int" name="mpiOrderFortran" />
                <analysis-argument order="14" type="void*" name="mpiBottom" />
            </analysis-function>
            <analysis-function name="isProcNull">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getProcNull">
            </analysis-function>
            <analysis-function name="isAnySource">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getAnySource">
            </analysis-function>
            <analysis-function name="isAnyTag">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getAnyTag">
            </analysis-function>
            <analysis-function name="isUndefined">
                <analysis-argument order="0" type="int" name="val" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="getUndefined">
            </analysis-function>
            <analysis-function name="isBsendOverhead">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getBsendOverhead">
            </analysis-function>
            <analysis-function name="isTagUb">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getTagUb">
            </analysis-function>
            <analysis-function name="isVersion">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getVersion">
            </analysis-function>
            <analysis-function name="isSubversion">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getSubversion">
            </analysis-function>
            <analysis-function name="isDistributeBlock">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getDistributeBlock">
            </analysis-function>
            <analysis-function name="isDistributeCyclic">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getDistributeCyclic">
            </analysis-function>
            <analysis-function name="isDistributeNone">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getDistributeNone">
            </analysis-function>
            <analysis-function name="isDistributeDfltDarg">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getDistributeDfltDarg">
            </analysis-function>
            <analysis-function name="isOrderC">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getOrderC">
            </analysis-function>
            <analysis-function name="isOrderFortran">
                <analysis-argument order="0" type="int" name="val" />
            </analysis-function>
            <analysis-function name="getOrderFortran">
            </analysis-function>
            <analysis-function name="isBottom">
                <analysis-argument order="0" type="void*" name="val" >
                </analysis-argument>
            </analysis-function>
            <analysis-function name="getBottom">
            </analysis-function>
        </analysis>
        <analysis name="OpTrack">
            <registered-name>OpTrack</registered-name>
            <module-name>libopTrack</module-name>
            <header-name>I_OpTrack.h</header-name>
            <interface-type>I_OpTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
            </dependencies>
            <analysis-function name="opCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="commute" >
                </analysis-argument>
                <analysis-argument order="3" type="@OP_F_TYPE@" name="newOp" />
            </analysis-function>
            <analysis-function name="opFree">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@OP_F_TYPE@" name="op" />
            </analysis-function>
            <analysis-function name="addPredefineds">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@OP_F_TYPE@" name="opNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@OP_F_TYPE@*" name="predefinedValues" />
            </analysis-function>
        </analysis>
        <analysis name="KeyvalTrack">
            <registered-name>KeyvalTrack</registered-name>
            <module-name>libkeyvalTrack</module-name>
            <header-name>I_KeyvalTrack.h</header-name>
            <interface-type>I_KeyvalTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
            </dependencies>
            <analysis-function name="keyvalCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@KEYVAL_TYPE@" name="newKeyval" />
            </analysis-function>
            <analysis-function name="keyvalFree">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@KEYVAL_TYPE@" name="keyval" />
            </analysis-function>
            <analysis-function name="addPredefineds">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@KEYVAL_TYPE@" name="opNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@KEYVAL_TYPE@" name="predefinedValues" />
            </analysis-function>
        </analysis>
        <analysis name="ErrTrack">
            <registered-name>ErrTrack</registered-name>
            <module-name>liberrTrack</module-name>
            <header-name>I_ErrTrack.h</header-name>
            <interface-type>I_ErrTrack</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
            </dependencies>
            <analysis-function name="errCreate">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@ERRHANDLER_F_TYPE@" name="newErr" />
            </analysis-function>
            <analysis-function name="errFree">
                <analysis-argument order="0" type="uint64_t" name="pId" >
                </analysis-argument>
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@ERRHANDLER_F_TYPE@" name="err" />
            </analysis-function>
            <analysis-function name="addPredefineds">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="@ERRHANDLER_F_TYPE@" name="errNull" />
                <analysis-argument order="2" type="int" name="numPredefs" />
                <analysis-argument order="3" type="int*" name="predefinedIds" />
                <analysis-argument order="4" type="@ERRHANDLER_F_TYPE@" name="predefinedValues" />
            </analysis-function>
        </analysis>
    </analyses>
    <operations>
        <operation return-type="int" name="getSendModeBuffered">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 0;</source-template>
        </operation>
        <operation return-type="int" name="return1">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 1;</source-template>
        </operation>
        <operation return-type="int" name="getSendModeReady">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 1;</source-template>
        </operation>
        <operation return-type="int" name="getSendModeSynchronized">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 2;</source-template>
        </operation>
        <operation return-type="int" name="getSendModeStandard">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 3;</source-template>
        </operation>
        <operation return-type="int" name="getWinTypeCreate">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 0;</source-template>
        </operation>
        <operation return-type="int" name="getWinTypeCreateDynamic">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 1;</source-template>
        </operation>
        <operation return-type="int" name="getWinTypeAllocate">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 2;</source-template>
        </operation>
        <operation return-type="int" name="getWinTypeAllocateShared">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 3;</source-template>
        </operation>
        <operation return-type="int" name="return0">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 0;</source-template>
        </operation>
        <operation return-type="int" name="return1">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 1;</source-template>
        </operation>
        <operation return-type="int" name="derefInt">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int*" name="intToDeref" />
            </operation-arguments>
            <source-template>int RETURN = 0; if (ARG0) RETURN = *ARG0;</source-template>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@" name="getMpiRequestNullF">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@REQUEST_F_TYPE@ RETURN = MUST_Request_m2i (MPI_REQUEST_NULL);</source-template>
        </operation>
        <operation return-type="int*" name="returnIntNULL">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int* RETURN = NULL;</source-template>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@*" name="returnOpaqueNULL">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@REQUEST_F_TYPE@* RETURN = NULL;</source-template>
        </operation>
        <operation return-type="@GROUP_F_TYPE@" name="getMpiGroupNullF">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@GROUP_F_TYPE@ RETURN = MUST_Group_m2i (MPI_GROUP_NULL);</source-template>
        </operation>
        <operation return-type="@GROUP_F_TYPE@*" name="getMpiGroupPredefValues">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                @GROUP_F_TYPE@ getMpiGroupPredefValues_temp = MUST_Group_m2i (MPI_GROUP_EMPTY); @GROUP_F_TYPE@* RETURN = &amp;getMpiGroupPredefValues_temp; int
                RETURN_LEN=1; 
            </source-template>
            <return-is-array>@GROUP_F_TYPE@</return-is-array>
        </operation>
        <operation return-type="int*" name="getMpiGroupPredefIds">
            <extra-headers>
                <header>I_GroupTrack.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int getMpiGroupPredefIds_temp = (int)MUST_MPI_GROUP_EMPTY; int* RETURN = &amp;getMpiGroupPredefIds_temp; int RETURN_LEN=1; 
            </source-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="comm2Group">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm*" name="comm" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = 0; if (ARG0 &amp;&amp; *ARG0 != MPI_COMM_NULL) { MPI_Group comm2Group_temp, comm2Group_temp2;
                PMPI_Comm_group (*ARG0, &amp;comm2Group_temp); PMPI_Comm_group (MPI_COMM_WORLD, &amp;comm2Group_temp2); PMPI_Group_size (comm2Group_temp,
                &amp;RETURN_LEN); RETURN = new int [RETURN_LEN]; int* comm2Group_tempArray = new int [RETURN_LEN]; for (int i = 0; i &lt; RETURN_LEN; i++)
                comm2Group_tempArray[i] = i; PMPI_Group_translate_ranks (comm2Group_temp, RETURN_LEN, comm2Group_tempArray, comm2Group_temp2, RETURN);
                PMPI_Group_free (&amp;comm2Group_temp); PMPI_Group_free (&amp;comm2Group_temp2); delete [] comm2Group_tempArray; } 
            </source-template>
            <cleanup-template>
                if (RETURN) delete [] RETURN; RETURN = NULL; 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="comm2RemoteGroup">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm*" name="intercomm" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = 0; if (ARG0 &amp;&amp; *ARG0 != MPI_COMM_NULL) { MPI_Group comm2Group_temp, comm2Group_temp2;
                PMPI_Comm_remote_group (*ARG0, &amp;comm2Group_temp); PMPI_Comm_group (MPI_COMM_WORLD, &amp;comm2Group_temp2); PMPI_Group_size
                (comm2Group_temp, &amp;RETURN_LEN); RETURN = new int [RETURN_LEN]; int* comm2Group_tempArray = new int [RETURN_LEN]; for (int i = 0; i &lt;
                RETURN_LEN; i++) comm2Group_tempArray[i] = i; PMPI_Group_translate_ranks (comm2Group_temp, RETURN_LEN, comm2Group_tempArray, comm2Group_temp2,
                RETURN); PMPI_Group_free (&amp;comm2Group_temp); PMPI_Group_free (&amp;comm2Group_temp2); delete [] comm2Group_tempArray; } 
            </source-template>
            <cleanup-template>
                if (RETURN) delete [] RETURN; RETURN = NULL; 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int" name="newIntercommContext">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm" name="local_comm" />
                <operation-argument order="1" type="int" name="local_leader" />
                <operation-argument order="2" type="int" name="remote_leader" />
                <operation-argument order="3" type="MPI_Comm" name="peer_comm" />
                <operation-argument order="4" type="int" name="tag" />
            </operation-arguments>
            <source-template>
                int RETURN; { static int localNextContext = 1; int maxLocalContext = 0; int TEMP_myRank; MPI_Comm TEMP_local_comm = ARG0; MPI_Comm
                TEMP_peer_comm = ARG3; int TEMP_local_leader = ARG1; int TEMP_remote_leader = ARG2; int TEMP_tag = ARG4; /*TODO possibly validate
                TEMP_local_leader, TEMP_local_comm*/ PMPI_Reduce (&amp;localNextContext, &amp;maxLocalContext, 1, MPI_INT, MPI_MAX, TEMP_local_leader,
                TEMP_local_comm); localNextContext = maxLocalContext; PMPI_Comm_rank (TEMP_local_comm, &amp;TEMP_myRank); if (TEMP_local_leader == TEMP_myRank)
                { MPI_Status status; /*TODO possibly validate TEMP_peer_comm, TEMP_remote_leader, TEMP_tag*/ PMPI_Sendrecv (&amp;localNextContext, 1, MPI_INT,
                TEMP_remote_leader, TEMP_tag, &amp;RETURN, 1, MPI_INT, TEMP_remote_leader, TEMP_tag, TEMP_peer_comm, &amp;status); RETURN += localNextContext;
                localNextContext++; } PMPI_Bcast (&amp;RETURN, 1, MPI_INT, TEMP_local_leader, TEMP_local_comm); } 
            </source-template>
        </operation>
        <operation return-type="int" name="returnDistributeBlock">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MUST_DISTRIBUTE_BLOCK;</source-template>
        </operation>
        <operation return-type="int" name="returnDistributeCyclic">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MUST_DISTRIBUTE_CYCLIC;</source-template>
        </operation>
        <operation return-type="int" name="returnDistributeNone">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MUST_DISTRIBUTE_NONE;</source-template>
        </operation>
        <operation return-type="int" name="returnDistributeDfltDarg">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MUST_DISTRIBUTE_DFLT_DARG;</source-template>
        </operation>
        <operation return-type="int" name="returnOrderC">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MUST_ORDER_C;</source-template>
        </operation>
        <operation return-type="int" name="returnOrderFortran">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MUST_ORDER_FORTRAN;</source-template>
        </operation>
        <operation return-type="int" name="returnProcNull">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MPI_PROC_NULL;</source-template>
        </operation>
        <operation return-type="int" name="returnAnySource">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MPI_ANY_SOURCE;</source-template>
        </operation>
        <operation return-type="int" name="returnAnyTag">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MPI_ANY_TAG;</source-template>
        </operation>
        <operation return-type="int" name="returnUndefined">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MPI_UNDEFINED;</source-template>
        </operation>
        <operation return-type="int" name="returnBsendOverhead">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MPI_BSEND_OVERHEAD;</source-template>
        </operation>
        <operation return-type="int" name="returnTagUb">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <!-- IMPORTANT: in the code template below we really must use MPI_COMM_WORLD, this attribute is only to be found there! -->
            <source-template>
                int RETURN = 0; int* RETURN_TEMP; int RETURN_flag = 0; PMPI_Attr_get(MPI_COMM_WORLD,MPI_TAG_UB,&amp;RETURN_TEMP,&amp;RETURN_flag); RETURN =
                *RETURN_TEMP; 
            </source-template>
        </operation>
        <operation return-type="int" name="returnVersion">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = 0; int subversion = 0; PMPI_Get_version(&amp;RETURN, &amp;subversion); 
            </source-template>
        </operation>
        <operation return-type="int" name="returnSubversion">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int version = 0; int RETURN = 0; PMPI_Get_version(&amp;version, &amp;RETURN); 
            </source-template>
        </operation>
        <operation return-type="void*" name="returnBottom">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>void* RETURN = MPI_BOTTOM;</source-template>
        </operation>
        <!-- MPI_Op Ops -->
        <operation return-type="@OP_F_TYPE@" name="getMpiOpNullF">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@OP_F_TYPE@ RETURN = MUST_Op_m2i (MPI_OP_NULL);</source-template>
        </operation>
        <operation return-type="@OP_F_TYPE@*" name="getMpiOpPredefValues">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                @OP_F_TYPE@ getMpiOpPredefValues_temp[14]; getMpiOpPredefValues_temp[0] = MUST_Op_m2i (MPI_MAX); getMpiOpPredefValues_temp[1] = MUST_Op_m2i
                (MPI_MIN); getMpiOpPredefValues_temp[2] = MUST_Op_m2i (MPI_SUM); getMpiOpPredefValues_temp[3] = MUST_Op_m2i (MPI_PROD);
                getMpiOpPredefValues_temp[4] = MUST_Op_m2i (MPI_LAND); getMpiOpPredefValues_temp[5] = MUST_Op_m2i (MPI_BAND); getMpiOpPredefValues_temp[6] =
                MUST_Op_m2i (MPI_LOR); getMpiOpPredefValues_temp[7] = MUST_Op_m2i (MPI_BOR); getMpiOpPredefValues_temp[8] = MUST_Op_m2i (MPI_LXOR);
                getMpiOpPredefValues_temp[9] = MUST_Op_m2i (MPI_BXOR); getMpiOpPredefValues_temp[10] = MUST_Op_m2i (MPI_MAXLOC); getMpiOpPredefValues_temp[11]
                = MUST_Op_m2i (MPI_MINLOC); getMpiOpPredefValues_temp[12] = MUST_Op_m2i (MPI_REPLACE); getMpiOpPredefValues_temp[13] = MUST_Op_m2i (MPI_NO_OP);
                @OP_F_TYPE@* RETURN = &amp;(getMpiOpPredefValues_temp[0]); int RETURN_LEN=14; 
            </source-template>
            <return-is-array>@OP_F_TYPE@</return-is-array>
        </operation>
        <operation return-type="int*" name="getMpiOpPredefIds">
            <extra-headers>
                <header>I_OpTrack.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int getMpiOpPredefIds_temp[14]; getMpiOpPredefIds_temp[0] = (int)MUST_MPI_OP_MAX; getMpiOpPredefIds_temp[1] = (int)MUST_MPI_OP_MIN;
                getMpiOpPredefIds_temp[2] = (int)MUST_MPI_OP_SUM; getMpiOpPredefIds_temp[3] = (int)MUST_MPI_OP_PROD; getMpiOpPredefIds_temp[4] =
                (int)MUST_MPI_OP_LAND; getMpiOpPredefIds_temp[5] = (int)MUST_MPI_OP_BAND; getMpiOpPredefIds_temp[6] = (int)MUST_MPI_OP_LOR;
                getMpiOpPredefIds_temp[7] = (int)MUST_MPI_OP_BOR; getMpiOpPredefIds_temp[8] = (int)MUST_MPI_OP_LXOR; getMpiOpPredefIds_temp[9] =
                (int)MUST_MPI_OP_BXOR; getMpiOpPredefIds_temp[10] = (int)MUST_MPI_OP_MAXLOC; getMpiOpPredefIds_temp[11] = (int)MUST_MPI_OP_MINLOC; 
                getMpiOpPredefIds_temp[12] = (int)MUST_MPI_OP_REPLACE; getMpiOpPredefIds_temp[13] = (int)MUST_MPI_OP_NO_OP;
                int* RETURN = &amp;(getMpiOpPredefIds_temp[0]); int RETURN_LEN=14; 
            </source-template>
            <return-is-array>int</return-is-array>
        </operation>
        <!-- KEYVALUE Ops -->
        <operation return-type="@KEYVAL_TYPE@" name="getMpiKeyvalNullF">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = MPI_KEYVAL_INVALID;</source-template>
        </operation>
        <operation return-type="@KEYVAL_TYPE@*" name="getMpiKeyvalPredefValues">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                @KEYVAL_TYPE@ getMpiKeyvalPredefValues_temp[4]; getMpiKeyvalPredefValues_temp[0] = MPI_TAG_UB; getMpiKeyvalPredefValues_temp[1] = MPI_IO;
                getMpiKeyvalPredefValues_temp[2] = MPI_HOST; getMpiKeyvalPredefValues_temp[3] = MPI_WTIME_IS_GLOBAL; @KEYVAL_TYPE@* RETURN =
                &amp;(getMpiKeyvalPredefValues_temp[0]); int RETURN_LEN=4; 
            </source-template>
            <return-is-array>@KEYVAL_TYPE@</return-is-array>
        </operation>
        <operation return-type="int*" name="getMpiKeyvalPredefIds">
            <extra-headers>
                <header>I_KeyvalTrack.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int getMpiKeyvalPredefIds_temp[4]; getMpiKeyvalPredefIds_temp[0] = (int)MUST_MPI_KEY_TAG_UB; getMpiKeyvalPredefIds_temp[1] =
                (int)MUST_MPI_KEY_IO; getMpiKeyvalPredefIds_temp[2] = (int)MUST_MPI_KEY_HOST; getMpiKeyvalPredefIds_temp[3] =
                (int)MUST_MPI_KEY_WTIME_IS_GLOBAL; int* RETURN = &amp;(getMpiKeyvalPredefIds_temp[0]); int RETURN_LEN=4; 
            </source-template>
            <return-is-array>int</return-is-array>
        </operation>
        <!-- Errorhandler Ops -->
        <operation return-type="@ERRHANDLER_F_TYPE@" name="getMpiErrNullF">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@ERRHANDLER_F_TYPE@ RETURN = MUST_Errhandler_m2i(MPI_ERRHANDLER_NULL);</source-template>
        </operation>
        <operation return-type="@ERRHANDLER_F_TYPE@*" name="getMpiErrPredefValues">
            <extra-headers>
                <header>mustFeaturetested.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                @ERRHANDLER_F_TYPE@ getMpiErrPredefValues_temp[2]; getMpiErrPredefValues_temp[0] = MUST_Errhandler_m2i(MPI_ERRORS_ARE_FATAL);
                getMpiErrPredefValues_temp[1] = MUST_Errhandler_m2i(MPI_ERRORS_?RETURN); @ERRHANDLER_F_TYPE@* RETURN = &amp;(getMpiErrPredefValues_temp[0]);
                int RETURN_LEN=2; 
            </source-template>
            <return-is-array>@ERRHANDLER_F_TYPE@</return-is-array>
        </operation>
        <operation return-type="int*" name="getMpiErrPredefIds">
            <extra-headers>
                <header>I_ErrTrack.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int getMpiErrPredefIds_temp[2]; getMpiErrPredefIds_temp[0] = (int)MUST_MPI_ERRORS_ARE_FATAL; getMpiErrPredefIds_temp[1] =
                (int)MUST_MPI_ERRORS_?RETURN; int* RETURN = &amp;(getMpiErrPredefIds_temp[0]); int RETURN_LEN=2; 
            </source-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int" name="getMpiWinMemoryModel">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Win*" name="win" />
            </operation-arguments>
            <source-template>
                int RETURN, flag; int* temp; PMPI_Win_get_attr(*ARG0, MPI_WIN_MODEL, &amp;temp, &amp;flag);
                if (!flag) RETURN = -1;
                else RETURN = *temp;
            </source-template>
        </operation>
    </operations>
</analysis-specification>
