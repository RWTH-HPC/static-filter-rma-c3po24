<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE analysis-specification PUBLIC "must_base" "@MUST_SPECIFICATION_DTD_PATH@/analysis-specification.dtd">
<analysis-specification group-name="MUST_Base" include-path="" path-to-libs="@CMAKE_INSTALL_PREFIX@/modules">
    <analyses>
        <analysis name="LocationAnalysis">
            <registered-name>LocationAnalysis</registered-name>
            <module-name>liblocationAnalysis</module-name>
            <header-name>I_LocationAnalysis.h</header-name>
            <interface-type>I_LocationAnalysis</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <reductions>
                <analysis-depend group="MUST_Base">LocationReduction</analysis-depend>
            </reductions>
            <analysis-function name="registerLocation">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="const char*" name="callName" />
                <analysis-argument order="3" type="int" name="callNameLen" />
                <analysis-argument order="4" type="void*" name="callptr" />
                <analysis-argument order="5" type="void*" name="codeptr" />
                <analysis-argument order="6" type="const char*" name="fname" />
                <analysis-argument order="7" type="size_t" name="fnameLen" />
                <analysis-argument order="8" type="void*" name="fbase" />
                @STACKTRACE_XML_PREFIX@ <analysis-argument order="9" type="int" name="numStackLevels" />
                <analysis-argument order="10"  type="int" name="stackInfosLength" />
                <analysis-argument order="11" type="int" name="stackInfosLength" />
                <analysis-argument order="12" type="int*" name="infoIndices" />
                <analysis-argument order="13" type="char*" name="stackInfos" />
                @STACKTRACE_XML_SUFFIX@ 
            </analysis-function>
<!-- TEST API event for downwards communication           <analysis-function name="testDown">
            	<analysis-argument order="0" type="float" /></analysis-function> -->
        </analysis>
        <analysis name="ParallelIdAnalysis">
            <registered-name>ParallelIdAnalysis</registered-name>
            <module-name>libparallelIdAnalysis</module-name>
            <header-name>I_ParallelIdAnalysis.h</header-name>
            <interface-type>I_ParallelIdAnalysis</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="">
            </analysis-function>
        </analysis>
        <analysis name="InitParallelId" local-integrity="yes" added-automagically="yes">
            <registered-name>InitParallelId</registered-name>
            <module-name>libinitParallelIdHybrid</module-name>
            <header-name>I_InitParallelId.h</header-name>
            <interface-type>I_InitParallelId</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="init">
            	<analysis-argument order="0" type="uint64_t*" name="pStorage" />
            </analysis-function>
        </analysis>
        <analysis name="GenerateLocationId">
            <registered-name>GenerateLocationId</registered-name>
            <module-name>libgenerateLocationId</module-name>
            <header-name>I_GenerateLocationId.h</header-name>
            <interface-type>I_GenerateLocationId</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="">
            </analysis-function>
        </analysis>
        <analysis name="InitLocationId" local-integrity="yes" added-automagically="yes">
            <registered-name>InitLocationId</registered-name>
            <module-name>libinitLocationId</module-name>
            <header-name>I_InitLocationId.h</header-name>
            <interface-type>I_InitLocationId</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
               <analysis-depend group="MUST_Base">InitParallelId</analysis-depend>
               <analysis-depend group="MUST_Base">GenerateLocationId</analysis-depend>
            </dependencies>
            <analysis-function name="init">
            	  <analysis-argument order="0" type="uint64_t*" name="pStorage" />
            	  <analysis-argument order="1" type="const char*" name="callName" />
              <analysis-argument order="2" type="int" name="callId" />
            </analysis-function>
            <analysis-function name="getNextLocationId">
            	  <analysis-argument order="0" type="uint64_t*" name="pStorage" />
            </analysis-function>
        </analysis>
        <analysis name="LocationReduction" reduction="yes">
            <registered-name>LocationReduction</registered-name>
            <module-name>liblocationReduction</module-name>
            <header-name>I_LocationReduction.h</header-name>
            <interface-type>I_LocationReduction</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
            </dependencies>
            <analysis-function name="reduce">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId">
                </analysis-argument>
                <analysis-argument order="2" type="const char*" name="callName" />
                <analysis-argument order="3" type="int" name="callNameLen" />
                <analysis-argument order="4" type="void*" name="callptr" />
                <analysis-argument order="5" type="void*" name="codeptr" />
                <analysis-argument order="6" type="const char*" name="fname" />
                <analysis-argument order="7" type="size_t" name="fnameLen" />
                <analysis-argument order="8" type="void*" name="fbase" />
                @STACKTRACE_XML_PREFIX@ <analysis-argument order="9" type="int" name="numStackLevels" />
                <analysis-argument order="10"  type="int" name="stackInfosLength" />
                <analysis-argument order="11" type="int" name="stackInfosLength" />
                <analysis-argument order="12" type="int*" name="infoIndices" />
                <analysis-argument order="13" type="char*" name="stackInfos" />
                @STACKTRACE_XML_SUFFIX@ 
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerStdOut">
            <registered-name>MsgLoggerStdOut</registered-name>
            <module-name>libmsgLoggerStdOut</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLogger</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <reductions>
                <!--TODO: Check whether FileReduction really is necessary (otherweise prebuilds are currently boken)-->
                <analysis-depend>MessageFileReduction</analysis-depend>
                <analysis-depend>MessageReduction</analysis-depend>
            </reductions>
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerJson">
            <registered-name>MsgLoggerJson</registered-name>
            <module-name>libmsgLoggerJson</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLogger</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <reductions>
                <!--TODO: Check whether FileReduction really is necessary (otherweise prebuilds are currently boken)-->
                <analysis-depend>MessageFileReduction</analysis-depend>
                <analysis-depend>MessageReduction</analysis-depend>
            </reductions>
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
        </analysis>
        <analysis name="CreateMessage">
            <registered-name>CreateMessage</registered-name>
            <module-name>libcreateMessage</module-name>
            <header-name>I_CreateMessage.h</header-name>
            <interface-type>I_CreateMessage</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
				<analysis-depend group="MUST_Base">
        			LocationAnalysis
        		</analysis-depend>
            </dependencies>
            <analysis-function name="">
            </analysis-function>
            <analysis-function name="changeFileId">
                <analysis-argument order="0" type="size_t" name="fileId" />
            </analysis-function>
        </analysis>
        <analysis name="FinishNotify">
            <registered-name>FinishNotify</registered-name>
            <module-name>libfinishNotify</module-name>
            <header-name>I_FinishNotify.h</header-name>
            <interface-type>I_FinishNotify</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="finish">
            </analysis-function>
        </analysis>
        <analysis name="MessageReduction" reduction="yes">
        	<registered-name>MessageReduction</registered-name>
        	<module-name>libmessageReduction</module-name>
        	<header-name>I_MessageReduction.h</header-name>
        	<interface-type>I_MessageReduction</interface-type>
        	<is-global>0</is-global>
        	<is-process-global>0</is-process-global>
        	<dependencies>
        		<analysis-depend group="MUST_Base">
        			LocationAnalysis
        		</analysis-depend>
        		<analysis-depend group="MUST_Base">
        			ParallelIdAnalysis
        		</analysis-depend>
        		<analysis-depend group="MUST_Base">
        			FinishNotify
        		</analysis-depend>
        	</dependencies>
        	<analysis-function name="reduce">
        		<analysis-argument order="0" type="int" name="msgId" />
        		<analysis-argument order="1" type="int" name="hasLocation" />
        		<analysis-argument order="2" type="uint64_t" name="pId" />
        		<analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
        		<analysis-argument order="5" type="int" name="msgType" />
        		<analysis-argument order="6" type="char*" name="text" />
        		<analysis-argument order="7" type="int" name="textLen" />
        		<analysis-argument order="8" type="int" name="numReferences" />
        		<analysis-argument order="9" type="uint64_t*" name="refPIds" />
        		<analysis-argument order="10" type="uint64_t*" name="refLIds" />
        	</analysis-function>
        	<analysis-function name="reduceStrided">
        		<analysis-argument order="0" type="int" name="msgId" />
        		<analysis-argument order="1" type="uint64_t" name="pIdRef"/>
        		<analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
        		<analysis-argument order="4" type="int" name="startRank" />
        		<analysis-argument order="5" type="int" name="stride" />
        		<analysis-argument order="6" type="int" name="count" />
        		<analysis-argument order="7" type="int" name="msgType" />
        		<analysis-argument order="8" type="char*" name="text" />
        		<analysis-argument order="9" type="int" name="textLen" />
        		<analysis-argument order="10" type="int" name="numReferences" />
        		<analysis-argument order="11" type="uint64_t*" name="refPIds"/>
        		<analysis-argument order="12" type="uint64_t*" name="refLIds" />
        	</analysis-function>
        </analysis>
        <analysis name="MessageFileReduction" reduction="yes">
            <registered-name>MessageFileReduction</registered-name>
            <module-name>libmessageFileReduction</module-name>
            <header-name>I_MessageFileReduction.h</header-name>
            <interface-type>I_MessageFileReduction</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">CreateMessage</analysis-depend>
            </dependencies>
            <analysis-function name="reduce">
                <analysis-argument order="0" type="size_t" name="fileId" />
            </analysis-function>
            <analysis-function name="filter">
                <analysis-argument order="0" type="size_t" name="fileId" />
                <analysis-argument order="1" type="const char*" name="filename" />
                <analysis-argument order="2" type="size_t" name="len" />
            </analysis-function>
        </analysis>
        <analysis name="MessageFileManager">
            <registered-name>MessageFileReduction</registered-name>
            <module-name>libmessageFileReduction</module-name>
            <header-name>I_MessageFileReduction.h</header-name>
            <interface-type>I_MessageFileReduction</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">CreateMessage</analysis-depend>
            </dependencies>
            <analysis-function name="changeMessageFile">
                <analysis-argument order="0" type="size_t" name="fileId" />
                <analysis-argument order="1" type="const char*" name="filename" />
                <analysis-argument order="2" type="size_t" name="len" />
            </analysis-function>
            <analysis-function name="changeMessageFileWrapper">
                <analysis-argument order="0" type="const char*" name="filename" />
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerHtml">
            <registered-name>MsgLoggerHtml</registered-name>
            <module-name>libmsgLoggerHtml</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLogger</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <reductions>
                <analysis-depend>MessageFileReduction</analysis-depend>
                <analysis-depend>MessageReduction</analysis-depend>
            </reductions>
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="openFile">
                <analysis-argument order="0" type="size_t" name="fileId" />
                <analysis-argument order="1" type="const char*" name="filename" />
                <analysis-argument order="2" type="size_t" name="len" />
            </analysis-function>
            <analysis-function name="closeFile">
                <analysis-argument order="0" type="size_t" name="fileId" />
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerDebugger">
            <registered-name>MsgLoggerDebugger</registered-name>
            <module-name>libmsgLoggerDebugger</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLogger</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <reductions>
            	<analysis-depend>MessageReduction</analysis-depend></reductions>
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerDdt">
            <registered-name>MsgLoggerDdt</registered-name>
            <module-name>libmsgLoggerDdt</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLoggerCId</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <!-- @TODO Disabled support for message reduction for DDT logger, I think the two of them might
                    not get along too well with each other -->
            <!-- <reductions>
            	<analysis-depend>MessageReduction</analysis-depend>
            	</reductions>
            	-->
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerScoreP">
            <registered-name>MsgLoggerScoreP</registered-name>
            <module-name>libmsgLoggerScoreP</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLogger</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <!-- @TODO Disabled support for message reduction for ScoreP logger, its code supports the reduction, but the output should be preferable without the aggregation -->
            <!-- <reductions>
            	<analysis-depend>MessageReduction</analysis-depend>
            	</reductions>
            	-->
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
        </analysis>
        <analysis name="MsgLoggerReproduce">
            <registered-name>MsgLoggerReproduce</registered-name>
            <module-name>libmsgLoggerReproduce</module-name>
            <header-name>I_MessageLogger.h</header-name>
            <interface-type>I_MessageLogger</interface-type>
            <is-global>1</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
            </dependencies>
            <!-- 
                 @TODO Disabled support for message reduction for Reproduce logger, its code supports the reduction, but the output should be preferable without the aggregation
                              The main issue here is that in the strided representation we won't have correct occurrence counts anymore. With that we can't "unfold" the strided representation
                              into something that triggers the message on all included processes. Rather with that we could only reproduce the message on the selected representative, which 
                              may or may not be good enough.            
            -->
            <!-- <reductions>
            	<analysis-depend>MessageReduction</analysis-depend>
            	</reductions>
            	-->
            <analysis-function name="log">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="int" name="hasLocation" />
                <analysis-argument order="2" type="uint64_t" name="pId" />
                <analysis-argument order="3" type="uint64_t" name="lId" />
                <analysis-argument order="4" type="size_t" name="fileId" />
                <analysis-argument order="5" type="int" name="msgType" />
                <analysis-argument order="6" type="char*" name="text" />
                <analysis-argument order="7" type="int" name="textLen" />
                <analysis-argument order="8" type="int" name="numReferences" />
                <analysis-argument order="9" type="uint64_t*" name="refPIds" />
                <analysis-argument order="10" type="uint64_t*" name="refLIds" />
            </analysis-function>
            <analysis-function name="logStrided">
                <analysis-argument order="0" type="int" name="msgId" />
                <analysis-argument order="1" type="uint64_t" name="pIdRef"/>
                <analysis-argument order="2" type="uint64_t" name="lIdRef" />
                <analysis-argument order="3" type="size_t" name="fileId" />
                <analysis-argument order="4" type="int" name="startRank" />
                <analysis-argument order="5" type="int" name="stride" />
                <analysis-argument order="6" type="int" name="count" />
                <analysis-argument order="7" type="int" name="msgType" />
                <analysis-argument order="8" type="char*" name="text" />
                <analysis-argument order="9" type="int" name="textLen" />
                <analysis-argument order="10" type="int" name="numReferences" />
                <analysis-argument order="11" type="uint64_t*" name="refPIds"/>
                <analysis-argument order="12" type="uint64_t*" name="refLIds" />
            </analysis-function>
        </analysis>
        <analysis name="MessageReproducer">
            <registered-name>MessageReproducer</registered-name>
            <module-name>libmessageReproducer</module-name>
            <header-name>I_MessageReproducer.h</header-name>
            <interface-type>I_MessageReproducer</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend><analysis-depend group="MUST_Base">LocationAnalysis</analysis-depend>
                
            <analysis-depend group="MUST_Base">CreateMessage</analysis-depend></dependencies>
            	<analysis-function name="testForMatch">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
            </analysis-function>
        </analysis><analysis name="ArgumentAnalysis">
            <registered-name>ArgumentAnalysis</registered-name>
            <module-name>libargumentAnalysis</module-name>
            <header-name>I_ArgumentAnalysis.h</header-name>
            <interface-type>I_ArgumentAnalysis</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="">
            </analysis-function>
        </analysis>
        <analysis name="FinalizeNotify">
            <registered-name>FinalizeNotify</registered-name>
            <module-name>libfinalizeNotify</module-name>
            <header-name>I_FinalizeNotify.h</header-name>
            <interface-type>I_FinalizeNotify</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="notify">
            </analysis-function>
        </analysis>
        <analysis name="FinalizeReduction" reduction="yes">
            <registered-name>FinalizeReduction</registered-name>
            <module-name>libfinalizeReduction</module-name>
            <header-name>I_FinalizeReduction.h</header-name>
            <interface-type>I_FinalizeReduction</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="reduce">
            </analysis-function>
        </analysis>
    <analysis name="FinalizeMust">
            <registered-name>FinalizeMust</registered-name>
            <module-name>libfinalizeMust</module-name>
            <header-name>I_FinalizeMust.h</header-name>
            <interface-type>I_FinalizeMust</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
            </dependencies>
            <analysis-function name="notify">
            </analysis-function>
        </analysis></analyses>
    <operations>
        <!--
            Operation that provides location IDs and access to these ids in order to overwrite them.
            
            IMPORTANT: read the below description of provideParallelIdStorage, this uses the same mechanism.
            
            IMPORTANT2: We have 2 arguments that we don't use in fact, we still have them such that we can do the
                                  automagic mapping, so we must not remove them!
         -->
        <operation return-type="uint64_t" name="provideLocationIdStorage">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="const char*" name="callName">
                </operation-argument>
                <operation-argument order="1" type="int" name="callId" />
            </operation-arguments>
            <source-template>
              MustLocationId RETURN_LEN = 0;
              MustLocationId* RETURN = &amp;RETURN_LEN;</source-template>
            <return-is-array>uint64_t</return-is-array>
        </operation>
        <!--
            Operation that provides parallel IDs and access to these ids in order to overwrite them.
            
            IMPORTANT: the operation does not sets the parallel Id and lets an analysis (which has more abilities) do this job.
            
            This little fellow provides storage for an uint64_t and both access to a pointer to the storage and to the value itself.
            It is intended to let an analysis (integrity) write a parallel Id into the storage and to be able to provide both
            the access to the value and the pointer to the parallelId.
            We achieve this with faking ourselves as being an array operation. The array access is the pointer to the storage and 
            the length access directly provides the value.
         -->
        <operation return-type="uint64_t*" name="provideParallelIdStorage">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
              MustParallelId RETURN_LEN = 0;
              MustParallelId* RETURN = &amp;RETURN_LEN;
            </source-template>
            <return-is-array>uint64_t</return-is-array>
        </operation>
        <!-- Operations generated by mk_argument_id_spec.xml -->
        <operation return-type="int" name="buildArgumentId_1_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_errorcode">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ERRORCODE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_location">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_LOCATION + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_address">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ADDRESS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_sendbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDBUF + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_sendcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDCOUNT + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_sendtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDTYPE + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_recvbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVBUF + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_recvcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNT + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_recvtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVTYPE + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_recvcounts">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNTS + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_displs">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISPLS + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_recvtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVTYPE + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_recvbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVBUF + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COUNT + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DATATYPE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_op">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OP + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_sendcounts">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDCOUNTS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_sdispls">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SDISPLS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_sendtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDTYPE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_sendtypes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDTYPES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_recvbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVBUF + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_recvcounts">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNTS + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_rdispls">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RDISPLS + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_recvtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVTYPE + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_recvtypes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVTYPES + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (9 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_keyval">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_KEYVAL + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_attribute_val">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ATTRIBUTE_VAL + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_flag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_FLAG + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_buffer">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_BUFFER + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COUNT + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DATATYPE + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_root">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ROOT + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_buf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_BUF + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_dest">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DEST + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_tag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TAG + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_size">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SIZE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_rank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANK + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_maxdims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAXDIMS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_coords">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COORDS + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_comm_old">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM_OLD + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_ndims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NDIMS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_dims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DIMS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_periods">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_PERIODS + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_reorder">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REORDER + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_comm_cart">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM_CART + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_maxdims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAXDIMS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_coords">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COORDS + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_newrank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWRANK + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_coords">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COORDS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_rank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANK + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_direction">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DIRECTION + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_disp">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISP + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_rank_source">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANK_SOURCE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_rank_dest">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANK_DEST + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_remain_dims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REMAIN_DIMS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_newcomm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWCOMM + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_comm1">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM1 + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_comm2">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM2 + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_result">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULT + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_group">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_GROUP + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_newcomm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWCOMM + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_color">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COLOR + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_key">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_KEY + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_newcomm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWCOMM + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_flag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_FLAG + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_nnodes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NNODES + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_function">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_FUNCTION + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_errhandler">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ERRHANDLER + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_errhandler">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ERRHANDLER + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_errorcode">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ERRORCODE + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_errorclass">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ERRORCLASS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_string">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STRING + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_resultlen">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULTLEN + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_root">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ROOT + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_root">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ROOT + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DATATYPE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_name">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NAME + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_resultlen">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULTLEN + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_version">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_VERSION + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_subversion">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SUBVERSION + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_nnodes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NNODES + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_n">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_N + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_indices">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INDICES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_sources">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SOURCES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_edges">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_EDGES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_degrees">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DEGREES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_destinations">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DESTINATIONS + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_weights">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WEIGHTS + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_info">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INFO + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_reorder">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REORDER + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_comm_dist_graph">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM_DIST_GRAPH + (9 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_comm_graph">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM_GRAPH + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_maxindices">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAXINDICES + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_maxedges">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAXEDGES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_indices">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INDICES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_edges">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_EDGES + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_maxneighbors">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAXNEIGHBORS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_neighbors">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEIGHBORS + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_nneighbors">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NNEIGHBORS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_nedges">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEDGES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_group1">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_GROUP1 + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_group2">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_GROUP2 + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_newgroup">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWGROUP + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_group">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_GROUP + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_ranks">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANKS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_newgroup">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWGROUP + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_ranks1">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANKS1 + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_group2">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_GROUP2 + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_ranks2">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANKS2 + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_argc">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARGC + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_argv">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARGV + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_required">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUIRED + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_provided">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_PROVIDED + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_flag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_FLAG + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_local_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_LOCAL_COMM + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_local_leader">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_LOCAL_LEADER + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_peer_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_PEER_COMM + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_remote_leader">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REMOTE_LEADER + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_newintercomm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWINTERCOMM + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_intercomm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INTERCOMM + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_high">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_HIGH + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_newintracomm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWINTRACOMM + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_source">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SOURCE + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_tag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TAG + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_source">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SOURCE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_copy_fn">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COPY_FN + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_delete_fn">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DELETE_FN + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_keyval">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_KEYVAL + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_extra_state">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_EXTRA_STATE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_keyval">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_KEYVAL + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_commute">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMMUTE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_op">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OP + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_op">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OP + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_inbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INBUF + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_incount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INCOUNT + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_outbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OUTBUF + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_outsize">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OUTSIZE + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_position">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_POSITION + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_incount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INCOUNT + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_size">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SIZE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_root">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ROOT + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_recvcounts">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNTS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_recvcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNT + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_displs">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISPLS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_recvcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNT + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_sendtag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SENDTAG + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_recvbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVBUF + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_recvcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVCOUNT + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_source">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SOURCE + (9 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_10_recvtag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVTAG + (10 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_11_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (11 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_12_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (12 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_source">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SOURCE + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_recvtag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RECVTAG + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (9 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COUNT + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_array_of_requests">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_REQUESTS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_flag">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_FLAG + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_array_of_statuses">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_STATUSES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_index">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INDEX + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_outcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OUTCOUNT + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_array_of_indices">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_INDICES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_array_of_statuses">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_STATUSES + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_status">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STATUS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DATATYPE + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_oldtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OLDTYPE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_newtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWTYPE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_newtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWTYPE + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_extent">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_EXTENT + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_array_of_blocklengths">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_BLOCKLENGTHS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_array_of_displacements">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_DISPLACEMENTS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_oldtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OLDTYPE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_newtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWTYPE + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_blocklength">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_BLOCKLENGTH + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_stride">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_STRIDE + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_displacement">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISPLACEMENT + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_array_of_types">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_TYPES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_insize">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INSIZE + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_position">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_POSITION + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_outcount">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OUTCOUNT + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DATATYPE + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_array_of_statuses">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_STATUSES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_ranges">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANGES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_oldtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OLDTYPE + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_lb">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_LB + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_extent">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_EXTENT + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_newtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWTYPE + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_ndims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NDIMS + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_array_of_sizes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_SIZES + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_array_of_subsizes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_SUBSIZES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_array_of_starts">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_STARTS + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_order">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ORDER + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_oldtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OLDTYPE + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_newtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWTYPE + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_size">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SIZE + (1 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_ndims">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NDIMS + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_array_of_gsizes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_GSIZES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_array_of_distribs">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_DISTRIBS + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_array_of_dargs">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_DARGS + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_array_of_psizes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_PSIZES + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_order">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ORDER + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_oldtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OLDTYPE + (9 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_10_newtype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NEWTYPE + (10 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_true_lb">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TRUE_LB + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_true_extent">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TRUE_EXTENT + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <!-- END of content generated by mk_argument_id_spec.sh -->
        <!-- BEGIN of content for MPI-type-content -->
        <operation return-type="int" name="buildArgumentId_2_num_integers">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NUM_INTEGERS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_num_addresses">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NUM_ADDRESSES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_num_datatypes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_NUM_DATATYPES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_combiner">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMBINER + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_max_integers">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAX_INTEGERS + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_max_addresses">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAX_ADDRESSES + (3 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_max_datatypes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MAX_DATATYPES + (4 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_array_of_integers">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_INTEGERS + (5 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_array_of_addresses">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_ADDRESSES + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_array_of_datatypes">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ARRAY_OF_DATATYPES + (7 &lt;&lt; 24); 
            </source-template>
        </operation>
        <!-- END of content for type-content -->
        <!-- BEGIN of content for MPI-3 NBC -->
        <operation return-type="int" name="buildArgumentId_2_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (6 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (8 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (9 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_10_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (10 &lt;&lt; 24); 
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_inoutbuf">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INOUTBUF + (2 &lt;&lt; 24); 
            </source-template>
        </operation>
        <!-- END of content for MPI-3 NBC -->
        <!-- BEGIN of content for MPI-3 RMA -->
        <operation return-type="int" name="buildArgumentId_2_disp_unit">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISP_UNIT + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_info">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INFO + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_baseptr">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_BASEPTR + (5 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (6 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_base">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_BASE + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_size">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_SIZE + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_base">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_BASE + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_disp_unit">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISP_UNIT + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_info">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INFO + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_info">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INFO + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_comm">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMM + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_win_copy_attr_fn">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN_COPY_ATTR_FN + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_win_delete_attr_fn">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN_DELETE_ATTR_FN + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_win_keyval">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN_KEYVAL + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_win_keyval">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN_KEYVAL + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_assert">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ASSERT + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_rank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RANK + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_win_keyval">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN_KEYVAL + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_info_used">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INFO_USED + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_win_name">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN_NAME + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_lock_type">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_LOCK_TYPE + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_assert">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ASSERT + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_assert">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ASSERT + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_info">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_INFO + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_disp_unit">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_DISP_UNIT + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_1_origin_addr">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ORIGIN_ADDR + (1 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_origin_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ORIGIN_COUNT + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_origin_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_ORIGIN_DATATYPE + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_target_rank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_RANK + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_target_disp">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_DISP + (5 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_target_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_COUNT + (6 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_target_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_DATATYPE + (7 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (8 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_result_addr">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULT_ADDR + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_result_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULT_COUNT + (5 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_result_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULT_DATATYPE + (6 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_target_rank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_RANK + (7 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_8_target_disp">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_DISP + (8 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_target_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_COUNT + (9 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_10_target_datatype">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_DATATYPE + (10 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_11_op">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OP + (11 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_12_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (12 &lt;&lt; 24);
            </source-template>
        </operation>
        <!--
        <operation return-type="int" name="buildArgumentId_9_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (9 &lt;&lt; 24);
            </source-template>
        </operation>
        -->
        <operation return-type="int" name="buildArgumentId_13_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (13 &lt;&lt; 24);
            </source-template>
        </operation>
        <!--
        <operation return-type="int" name="buildArgumentId_6_target_count">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_COUT + (6 &lt;&lt; 24);
            </source-template>
        </operation>
        -->
        <operation return-type="int" name="buildArgumentId_8_op">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OP + (8 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_9_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (9 &lt;&lt; 24);
            </source-template>
        </operation>
        <!--
        <operation return-type="int" name="buildArgumentId_10_request">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_REQUEST + (10 &lt;&lt; 24);
            </source-template>
        </operation>
        -->
        <operation return-type="int" name="buildArgumentId_2_result_addr">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULT_ADDR + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_op">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_OP + (6 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_7_win">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_WIN + (7 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_2_compare_addr">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_COMPARE_ADDR + (2 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_3_result_addr">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_RESULT_ADDR + (3 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_5_target_rank">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_RANK + (5 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_6_target_disp">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_TARGET_DISP + (6 &lt;&lt; 24);
            </source-template>
        </operation>
        <!-- END of content for MPI-3 RMA -->
        <!-- BEGIN of content for unmapped MPI-3 -->
            <operation return-type="int" name="buildArgumentId_1_errorclass">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ERRORCLASS + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_disp">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DISP + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_addr1">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ADDR1 + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_addr2">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ADDR2 + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_baseptr">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_BASEPTR + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_port_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PORT_NAME + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_root">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ROOT + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_newcomm">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_NEWCOMM + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_oldcomm">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OLDCOMM + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_comm_keyval">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_COMM_KEYVAL + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_extra_state">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_EXTRA_STATE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_attribute_val_in">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ATTRIBUTE_VAL_IN + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_attribute_val_out">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ATTRIBUTE_VAL_OUT + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_flag">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FLAG + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_tag">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TAG + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_error_code">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ERROR_CODE + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_comm_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_COMM_NAME + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_parent">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PARENT + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_request">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REQUEST + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_fd">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FD + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_intercomm">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INTERCOMM + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_command">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_COMMAND + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_maxprocs">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_MAXPROCS + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_root">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ROOT + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_7_intercomm">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INTERCOMM + (7 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_8_array_of_errcodes">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_ERRCODES + (8 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_array_of_commands">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_COMMANDS + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_array_of_argv">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_ARGV + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_array_of_maxprocs">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_MAXPROCS + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_array_of_info">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_INFO + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_8_intercomm">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INTERCOMM + (8 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_9_array_of_errcodes">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_ERRCODES + (9 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_split_type">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SPLIT_TYPE + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_userbuf">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_USERBUF + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_filebuf">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FILEBUF + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_position">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_POSITION + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_extra_state">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_EXTRA_STATE + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_indegree">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INDEGREE + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_sourceweights">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SOURCEWEIGHTS + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_outdegree">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OUTDEGREE + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_destinations">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DESTINATIONS + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_7_destweights">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DESTWEIGHTS + (7 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_8_info">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INFO + (8 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_9_reorder">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REORDER + (9 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_10_comm_dist_graph">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_COMM_DIST_GRAPH + (10 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_maxindegree">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_MAXINDEGREE + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_maxoutdegree">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_MAXOUTDEGREE + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_outdegree">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OUTDEGREE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_weighted">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_WEIGHTED + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_file">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FILE + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_fh">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FH + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_file_errhandler_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FILE_ERRHANDLER_FN + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_filename">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FILENAME + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_amode">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_AMODE + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_offset">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OFFSET + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_etype">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ETYPE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_filetype">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FILETYPE + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_datarep">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DATAREP + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_buf">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_BUF + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_request">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REQUEST + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_buf">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_BUF + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_count">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_COUNT + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_datatype">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DATATYPE + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_filename">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FILENAME + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_amode">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_AMODE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_fh">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FH + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_status">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_STATUS + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_whence">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_WHENCE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_info">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INFO + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_extra_state">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_EXTRA_STATE + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_complete">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_COMPLETE + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_query_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_QUERY_FN + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_free_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FREE_FN + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_cancel_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_CANCEL_FN + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_key">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_KEY + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_newinfo">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_NEWINFO + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_valuelen">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_VALUELEN + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_value">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_VALUE + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_flag">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_FLAG + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_nkeys">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_NKEYS + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_value">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_VALUE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_service_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SERVICE_NAME + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_port_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PORT_NAME + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_message">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_MESSAGE + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_port_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PORT_NAME + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_datarep">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DATAREP + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_inbuf">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INBUF + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_incount">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INCOUNT + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_outbuf">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OUTBUF + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_outsize">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OUTSIZE + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_7_position">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_POSITION + (7 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_provided">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PROVIDED + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_read_conversion_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_READ_CONVERSION_FN + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_write_conversion_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_WRITE_CONVERSION_FN + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_dtype_file_extent_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DTYPE_FILE_EXTENT_FN + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_extra_state">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_EXTRA_STATE + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_c_status">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_C_STATUS + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_f_status">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_F_STATUS + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_f_status">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_F_STATUS + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_c_status">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_C_STATUS + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_type_keyval">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPE_KEYVAL + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_p">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_P + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_r">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_R + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_r">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_R + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_type_copy_attr_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPE_COPY_ATTR_FN + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_type_delete_attr_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPE_DELETE_ATTR_FN + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_type_keyval">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPE_KEYVAL + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_type_keyval">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPE_KEYVAL + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_type_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPE_NAME + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_typeclass">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TYPECLASS + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_insize">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INSIZE + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_position">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_POSITION + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_outcount">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OUTCOUNT + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_7_datatype">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DATATYPE + (7 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_invec">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INVEC + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_inoutvec">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INOUTVEC + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_len">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_LEN + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_oldwin">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_OLDWIN + (1 &lt;&lt; 24);
                </source-template>
            </operation>
        <operation return-type="int" name="buildArgumentId_5_message">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MESSAGE + (5 &lt;&lt; 24);
            </source-template>
        </operation>
        <operation return-type="int" name="buildArgumentId_4_message">
            <extra-headers>
                <header>BaseIds.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>
                int RETURN = MUST_ARGUMENT_MESSAGE + (4 &lt;&lt; 24);
            </source-template>
        </operation>
        <!-- END of content for unmapped MPI-3 -->
        <!-- BEGIN of content for MPI-4 -->
            <operation return-type="int" name="buildArgumentId_9_info">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INFO + (9 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_10_info">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_INFO + (10 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_11_request">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REQUEST + (11 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_stringtag">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_STRINGTAG + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_errhandler">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ERRHANDLER + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_request">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REQUEST + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_session">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SESSION + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_pset_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PSET_NAME + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_buflen">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_BUFLEN + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_local_group">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_LOCAL_GROUP + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_remote_group">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REMOTE_GROUP + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_stringtag">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_STRINGTAG + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_7_errhandler">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ERRHANDLER + (7 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_8_newintercomm">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_NEWINTERCOMM + (8 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_length">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_LENGTH + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_array_of_partitions">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_ARRAY_OF_PARTITIONS + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_partition_low">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PARTITION_LOW + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_partition_high">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PARTITION_HIGH + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_partitions">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PARTITIONS + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_source">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SOURCE + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_6_tag">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_TAG + (6 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_dest">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_DEST + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_session_errhandler_fn">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SESSION_ERRHANDLER_FN + (1 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_n">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_N + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_4_pset_len">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PSET_LEN + (4 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_5_pset_name">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PSET_NAME + (5 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_npset_names">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_NPSET_NAMES + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_3_session">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_SESSION + (3 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_12_request">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_REQUEST + (12 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_2_partition">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PARTITION + (2 &lt;&lt; 24);
                </source-template>
            </operation>
            <operation return-type="int" name="buildArgumentId_1_partition">
                <extra-headers>
                    <header>BaseIds.h</header>
                </extra-headers>
                <operation-arguments>
                </operation-arguments>
                <source-template>
        int RETURN = MUST_ARGUMENT_PARTITION + (1 &lt;&lt; 24);
                </source-template>
            </operation>
        <!-- END of content for MPI-4 -->
    </operations>
</analysis-specification>
