<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE analysis-specification PUBLIC "must_base" "@MUST_SPECIFICATION_DTD_PATH@/analysis-specification.dtd">
<analysis-specification group-name="MUST_CollectiveCondition" include-path="" path-to-libs="@CMAKE_INSTALL_PREFIX@/modules">
    <analyses>
        <analysis name="CollectiveCondition">
            <registered-name>CollectiveCondition</registered-name>
            <module-name>libcollectiveCondition</module-name>
            <header-name>I_CollectiveCondition.h</header-name>
            <interface-type>I_CollectiveCondition</interface-type>
            <is-global>0</is-global>
            <is-process-global>0</is-process-global>
            <dependencies>
                <analysis-depend group="MUST_Base">ParallelIdAnalysis</analysis-depend>
                <analysis-depend group="MUST_Resource">CommTrack</analysis-depend>
                <analysis-depend group="MUST_Resource">WinTrack</analysis-depend>
            </dependencies>
            <analysis-function name="noTransfer">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="coll" />
                <analysis-argument order="3" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="4" type="int" name="hasRequest" />
                <analysis-argument order="5" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="noTransferWin">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="coll" />
                <analysis-argument order="3" type="@WIN_F_TYPE@" name="win" />
                <analysis-argument order="4" type="int" name="hasRequest" />
                <analysis-argument order="5" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="noTransferGroup">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="int" name="coll" />
                <analysis-argument order="3" type="@GROUP_F_TYPE@" name="win" />
                <analysis-argument order="4" type="int" name="hasRequest" />
                <analysis-argument order="5" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="gather">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int" name="sendcount" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="5" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="6" type="int" name="recvcount" />
                <analysis-argument order="7" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="8" type="int" name="root" />
                <analysis-argument order="9" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="10" type="int" name="hasRequest" />
                <analysis-argument order="11" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="gatherv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int" name="sendcount" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="5" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="6" type="int*" name="recvcounts" />
                <analysis-argument order="7" type="int*" name="displs" />
                <analysis-argument order="8" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="9" type="int" name="root" />
                <analysis-argument order="10" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="11" type="int" name="hasRequest" />
                <analysis-argument order="12" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="reduce">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="4" type="int" name="count" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="6" type="@OP_F_TYPE@" name="op" />
                <analysis-argument order="7" type="int" name="root" />
                <analysis-argument order="8" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="9" type="int" name="hasRequest" />
                <analysis-argument order="10" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="bcast">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="buffer" />
                <analysis-argument order="3" type="int" name="count" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="5" type="int" name="root" />
                <analysis-argument order="6" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="7" type="int" name="hasRequest" />
                <analysis-argument order="8" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="scatter">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int" name="sendcount" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="5" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="6" type="int" name="recvcount" />
                <analysis-argument order="7" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="8" type="int" name="root" />
                <analysis-argument order="9" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="10" type="int" name="hasRequest" />
                <analysis-argument order="11" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="scatterv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int*" name="sendcounts" />
                <analysis-argument order="4" type="int*" name="displs" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="6" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="7" type="int" name="recvcount" />
                <analysis-argument order="8" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="9" type="int" name="root" />
                <analysis-argument order="10" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="11" type="int" name="hasRequest" />
                <analysis-argument order="12" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="allgather">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int" name="sendcount" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="5" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="6" type="int" name="recvcount" />
                <analysis-argument order="7" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="8" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="9" type="int" name="hasRequest" />
                <analysis-argument order="10" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="allgatherv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int" name="sendcount" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="5" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="6" type="int*" name="recvcounts" />
                <analysis-argument order="7" type="int*" name="displs" />
                <analysis-argument order="8" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="9" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="10" type="int" name="hasRequest" />
                <analysis-argument order="11" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="alltoall">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int" name="sendcount" />
                <analysis-argument order="4" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="5" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="6" type="int" name="recvcount" />
                <analysis-argument order="7" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="8" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="9" type="int" name="hasRequest" />
                <analysis-argument order="10" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="alltoallv">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int*" name="sendcounts" />
                <analysis-argument order="4" type="int*" name="sdispls" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="sendtype" />
                <analysis-argument order="6" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="7" type="int*" name="recvcounts" />
                <analysis-argument order="8" type="int*" name="rdispls" />
                <analysis-argument order="9" type="@DATATYPE_F_TYPE@" name="recvtype" />
                <analysis-argument order="10" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="11" type="int" name="hasRequest" />
                <analysis-argument order="12" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="alltoallw">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="int*" name="sendcounts" />
                <analysis-argument order="4" type="int*" name="sdispls" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@*" name="sendtypes" />
                <analysis-argument order="6" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="7" type="int*" name="recvcounts" />
                <analysis-argument order="8" type="int*" name="rdispls" />
                <analysis-argument order="9" type="@DATATYPE_F_TYPE@*" name="recvtypes" />
                <analysis-argument order="10" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="11" type="int" name="hasRequest" />
                <analysis-argument order="12" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="allreduce">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="4" type="int" name="count" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="6" type="@OP_F_TYPE@" name="op" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="int" name="hasRequest" />
                <analysis-argument order="9" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="reduce_scatter">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="4" type="int*" name="recvcounts" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="6" type="@OP_F_TYPE@" name="op" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="int" name="hasRequest" />
                <analysis-argument order="9" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="reduce_scatter_block">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="4" type="int" name="recvcount" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="6" type="@OP_F_TYPE@" name="op" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="int" name="hasRequest" />
                <analysis-argument order="9" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="scan">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="4" type="int" name="count" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="6" type="@OP_F_TYPE@" name="op" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="int" name="hasRequest" />
                <analysis-argument order="9" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
            <analysis-function name="exscan">
                <analysis-argument order="0" type="uint64_t" name="pId" />
                <analysis-argument order="1" type="uint64_t" name="lId" />
                <analysis-argument order="2" type="@AINT_TYPE@" name="sendbuf" />
                <analysis-argument order="3" type="@AINT_TYPE@" name="recvbuf" />
                <analysis-argument order="4" type="int" name="count" />
                <analysis-argument order="5" type="@DATATYPE_F_TYPE@" name="datatype" />
                <analysis-argument order="6" type="@OP_F_TYPE@" name="op" />
                <analysis-argument order="7" type="@COMM_F_TYPE@" name="comm" />
                <analysis-argument order="8" type="int" name="hasRequest" />
                <analysis-argument order="9" type="@REQUEST_F_TYPE@" name="request" />
            </analysis-function>
        </analysis>
    </analyses>
    <operations>
        <operation return-type="int" name="mul">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int" name="arg0" />
                <operation-argument order="1" type="int" name="arg1" />
            </operation-arguments>
            <source-template>
                int RETURN = ARG0 * ARG1; 
            </source-template>
        </operation>
        <operation return-type="int*" name="returnNULL">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int* RETURN = NULL;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Barrier">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_BARRIER;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Cart_create">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_CART_CREATE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Cart_sub">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_CART_SUB;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Comm_create">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_COMM_CREATE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Comm_create_group">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_COMM_CREATE_GROUP;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Comm_create_from_group">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_COMM_CREATE_FROM_GROUP;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Comm_dup">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_COMM_DUP;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Comm_free">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_COMM_FREE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Comm_split">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_COMM_SPLIT;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Finalize">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_FINALIZE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Graph_create">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_GRAPH_CREATE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Intercomm_create">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_INTERCOMM_CREATE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Intercomm_merge">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_INTERCOMM_MERGE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Win_allocate">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_WIN_ALLOCATE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Win_allocate_shared">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_WIN_ALLOCATE_SHARED;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Win_create">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_WIN_CREATE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Win_create_dynamic">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_WIN_CREATE_DYNAMIC;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Win_fence">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_WIN_FENCE;</source-template>
        </operation>
        <operation return-type="int" name="getCollIdMPI_Win_free">
            <extra-headers>
                <header>MustEnums.h</header>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = must::MUST_COLL_WIN_FREE;</source-template>
        </operation>
        <operation return-type="@COMM_F_TYPE@" name="getCommWorld">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@COMM_F_TYPE@ RETURN = MUST_Comm_m2i(MPI_COMM_WORLD);</source-template>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@" name="fillRequestValue">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>@REQUEST_F_TYPE@ RETURN = 0;</source-template>
        </operation>
        <operation return-type="int" name="hasRequest">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 1;</source-template>
        </operation>
        <operation return-type="int" name="hasNoRequest">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
            </operation-arguments>
            <source-template>int RETURN = 0;</source-template>
        </operation>
    </operations>
</analysis-specification>
