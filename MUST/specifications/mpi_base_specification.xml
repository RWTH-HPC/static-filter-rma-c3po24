<?xml version="1.0" encoding="UTF-8"?>

<!--
  Part of the MUST Project, under BSD-3-Clause License
 See https://hpc.rwth-aachen.de/must/LICENSE for license information.
  SPDX-License-Identifier: BSD-3-Clause
-->

<!DOCTYPE analysis-specification PUBLIC "MPI_General" "@MUST_SPECIFICATION_DTD_PATH@/analysis-specification.dtd">
<analysis-specification group-name="MPI_Base" include-path="" path-to-libs="@CMAKE_INSTALL_PREFIX@/modules">
    <analyses>
    </analyses>
    <operations>
        <operation return-type="int" name="comm_size">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_CommSize (ARG0); 
            </source-template>
        </operation>
        <operation return-type="int" name="comm_indegree">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_CommIndegree (ARG0); 
            </source-template>
        </operation>
        <operation return-type="int" name="comm_outdegree">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_CommOutdegree (ARG0); 
            </source-template>
        </operation>
        <operation return-type="int" name="deref">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int*" />
            </operation-arguments>
            <source-template>
                int RETURN = *ARG0;
            </source-template>
        </operation>
        <!-- In theory we would need to use one specific deref_X function for each type of handle -->
        <operation return-type="@COMM_F_TYPE@" name="deref_opaque">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int*" />
            </operation-arguments>
            <source-template>
                @COMM_F_TYPE@ RETURN = *((MustCommType *)ARG0);
            </source-template>
        </operation>
        <operation return-type="int" name="deref_noundefined">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int*" />
            </operation-arguments>
            <source-template>
                int RETURN = *ARG0; if(RETURN == MPI_UNDEFINED){RETURN = 0;}
            </source-template>
        </operation>
        <operation return-type="int" name="graph_edge_count">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int*" >
                </operation-argument>
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_GraphEdgeCount (ARG0, ARG1); 
            </source-template>
        </operation>
        <operation return-type="int" name="dist_graph_edge_count">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int*" >
                </operation-argument>
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_DistGraphEdgeCount (ARG0, ARG1); 
            </source-template>
        </operation>
        <operation return-type="@AINT_TYPE@" name="getAddress">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="void*" />
            </operation-arguments>
            <source-template>
                @AINT_TYPE@ RETURN = BaseMpi_GetAddress (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@COMM_F_TYPE@" name="convertComm2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm" />
            </operation-arguments>
            <source-template>
                @COMM_F_TYPE@ RETURN = BaseMpi_Comm2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="uint64_t" name="convertCount2int">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Count" />
            </operation-arguments>
            <source-template>
                uint64_t RETURN = (uint64_t) (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@SESSION_F_TYPE@" name="convertSessionint">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="Mpi_Session" />
            </operation-arguments>
            <source-template>
                @SESSION_F_TYPE@ RETURN = BaseMpi_Session2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@" name="convertRequest2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Request" />
            </operation-arguments>
            <source-template>
                @REQUEST_F_TYPE@ RETURN = BaseMpi_Request2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@DATATYPE_F_TYPE@" name="convertDatatype2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Datatype" />
            </operation-arguments>
            <source-template>
                @DATATYPE_F_TYPE@ RETURN = BaseMpi_Datatype2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@INFO_F_TYPE@" name="convertInfo2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Info" />
            </operation-arguments>
            <source-template>
                @INFO_F_TYPE@ RETURN = BaseMpi_Info2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@OP_F_TYPE@" name="convertOp2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Op" >
                </operation-argument>
            </operation-arguments>
            <source-template>
                @OP_F_TYPE@ RETURN = BaseMpi_Op2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@WIN_F_TYPE@" name="convertWin2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Win" />
            </operation-arguments>
            <source-template>
                @WIN_F_TYPE@ RETURN = BaseMpi_Win2int (ARG0);
            </source-template>
        </operation>
        <operation return-type="@FILE_F_TYPE@" name="convertFile2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_File" />
            </operation-arguments>
            <source-template>
                @FILE_F_TYPE@ RETURN = BaseMpi_File2int (ARG0);
            </source-template>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@" name="deref_convertRequest2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Request*" />
            </operation-arguments>
            <source-template>
                @REQUEST_F_TYPE@ RETURN = BaseMpi_RequestP2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@WIN_F_TYPE@" name="deref_convertWin2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Win*" />
            </operation-arguments>
            <source-template>
                @WIN_F_TYPE@ RETURN = BaseMpi_WinP2int (ARG0);
            </source-template>
        </operation>
        <operation return-type="@FILE_F_TYPE@" name="deref_convertFile2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_File*" />
            </operation-arguments>
            <source-template>
                @FILE_F_TYPE@ RETURN = BaseMpi_FileP2int (ARG0);
            </source-template>
        </operation>
        <operation return-type="void*" name="deref_winReturnBasePtr">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="void*" />
            </operation-arguments>
            <source-template>
                void* RETURN = *((void**) ARG0);
            </source-template>
        </operation>
        <operation return-type="@COMM_F_TYPE@" name="deref_convertComm2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm*" />
            </operation-arguments>
            <source-template>
                @COMM_F_TYPE@ RETURN = BaseMpi_CommP2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@GROUP_F_TYPE@" name="convertGroup2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Group" />
            </operation-arguments>
            <source-template>
                @GROUP_F_TYPE@ RETURN = BaseMpi_Group2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@GROUP_F_TYPE@" name="deref_convertGroup2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Group*" />
            </operation-arguments>
            <source-template>
                @GROUP_F_TYPE@ RETURN = BaseMpi_GroupP2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@ERRHANDLER_F_TYPE@" name="deref_convertErrhandler2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Errhandler*" />
            </operation-arguments>
            <source-template>
                @ERRHANDLER_F_TYPE@ RETURN = BaseMpi_ErrhandlerP2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@ERRHANDLER_F_TYPE@" name="convertErrhandler2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Errhandler" />
            </operation-arguments>
            <source-template>
                @ERRHANDLER_F_TYPE@ RETURN = BaseMpi_Errhandler2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="int" name="deref_convertStatus2intSource">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_StatusP2Source (ARG0); 
            </source-template>
        </operation>
        <operation return-type="int" name="deref_convertStatus2intTag">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_StatusP2Tag (ARG0); 
            </source-template>
        </operation>
        <operation return-type="int" name="deref_convertStatus2intError">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
            </operation-arguments>
            <source-template>
                int RETURN = BaseMpi_StatusP2Errror (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@OP_F_TYPE@" name="deref_convertOp2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Op*" />
            </operation-arguments>
            <source-template>
                @OP_F_TYPE@ RETURN = BaseMpi_OpP2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@*" name="convertRequests2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Request*" />
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                @REQUEST_F_TYPE@* RETURN = NULL; int RETURN_LEN = ARG1; BaseMpi_Requests2int (&amp;RETURN, ARG0, ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeUint64Array (RETURN); 
            </cleanup-template>
            <return-is-array>@REQUEST_F_TYPE@</return-is-array>
        </operation>
        <operation return-type="int*" name="convertStatuses2intSource">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = ARG1; BaseMpi_Statuses2Source (&amp;RETURN, ARG0, ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeArray (RETURN); 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="convertStatuses2intTag">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = ARG1; BaseMpi_Statuses2Tag (&amp;RETURN, ARG0, ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeArray (RETURN); 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="convertStatuses2intError">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = ARG1; BaseMpi_Statuses2Error (&amp;RETURN, ARG0, ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeArray (RETURN); 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="deref_convertStatuses2intSource">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
                <operation-argument order="1" type="int*" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = *ARG1; BaseMpi_Statuses2Source (&amp;RETURN, ARG0, *ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeArray (RETURN); 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="deref_convertStatuses2intTag">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
                <operation-argument order="1" type="int*" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = *ARG1; BaseMpi_Statuses2Tag (&amp;RETURN, ARG0, *ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeArray (RETURN); 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int*" name="deref_convertStatuses2intError">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Status*" />
                <operation-argument order="1" type="int*" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = *ARG1; BaseMpi_Statuses2Error (&amp;RETURN, ARG0, *ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeArray (RETURN); 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="@DATATYPE_F_TYPE@" name="deref_convertDatatype2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Datatype*" />
            </operation-arguments>
            <source-template>
                @DATATYPE_F_TYPE@ RETURN = BaseMpi_DatatypeP2int (ARG0); 
            </source-template>
        </operation>
        <operation return-type="@DATATYPE_F_TYPE@*" name="convertDatatypes2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Datatype*" />
                <operation-argument order="1" type="int" />
            </operation-arguments>
            <source-template>
                @DATATYPE_F_TYPE@* RETURN = NULL; int RETURN_LEN = ARG1; BaseMpi_Datatypes2int (&amp;RETURN, ARG0, ARG1); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeUint64Array (RETURN); 
            </cleanup-template>
            <return-is-array>@DATATYPE_F_TYPE@</return-is-array>
        </operation>
        <operation return-type="@DATATYPE_F_TYPE@*" name="convertDatatypes2intForComm">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Datatype*" />
                <operation-argument order="1" type="MPI_Comm" />
            </operation-arguments>
            <source-template>
                @DATATYPE_F_TYPE@* RETURN = NULL; int RETURN_LEN = BaseMpi_CommSize (ARG1); BaseMpi_Datatypes2int (&amp;RETURN, ARG0, RETURN_LEN); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeUint64Array (RETURN); 
            </cleanup-template>
            <return-is-array>@DATATYPE_F_TYPE@</return-is-array>
        </operation>
        <operation return-type="@REQUEST_F_TYPE@*" name="convertIndexedRequest2int">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Request*" name="requests" />
                <operation-argument order="1" type="int" name="count" >
                </operation-argument>
                <operation-argument order="2" type="int" name="indices" />
            </operation-arguments>
            <source-template>@REQUEST_F_TYPE@* RETURN = BaseMpi_Request2intIndexed (ARG0, ARG1, ARG2);</source-template>
            <cleanup-template>
                BaseMpi_FreeUint64Array (RETURN); 
            </cleanup-template>
        </operation>
        <operation return-type="@AINT_TYPE@" name="convertAint2uint64">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Aint" name="value" />
            </operation-arguments>
            <source-template>@AINT_TYPE@ RETURN = BaseMpi_Aint2uint64 (ARG0);</source-template>
        </operation>
        <operation return-type="@AINT_TYPE@" name="deref_convertAint2uint64">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Aint*" name="value" />
            </operation-arguments>
            <source-template>@AINT_TYPE@ RETURN = BaseMpi_Aint2uint64 (*ARG0);</source-template>
        </operation>
        <operation return-type="@AINT_TYPE@*" name="convertAints2uint64">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int" name="count" />
                <operation-argument order="1" type="MPI_Aint*" name="values" />
            </operation-arguments>
            <source-template>
                @AINT_TYPE@ *RETURN = NULL; int RETURN_LEN = ARG0; BaseMpi_Aints2uint64 (&amp;RETURN, ARG1, ARG0); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeInt64Array (RETURN); 
            </cleanup-template>
            <return-is-array>@AINT_TYPE@</return-is-array>
        </operation>
        <operation return-type="@COUNT_TYPE@" name="convertCount2uint64">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Count" name="value" />
            </operation-arguments>
            <source-template>@COUNT_TYPE@ RETURN = BaseMpi_Count2uint64 (ARG0);</source-template>
        </operation>
        <operation return-type="@COUNT_TYPE@" name="deref_convertCount2uint64">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Count*" name="value" />
            </operation-arguments>
            <source-template>@COUNT_TYPE@ RETURN = BaseMpi_Count2uint64 (*ARG0);</source-template>
        </operation>
        <operation return-type="@COUNT_TYPE@*" name="convertCounts2uint64">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int" name="count" />
                <operation-argument order="1" type="MPI_Count*" name="values" />
            </operation-arguments>
            <source-template>
                @COUNT_TYPE@ *RETURN = NULL; int RETURN_LEN = ARG0; BaseMpi_Counts2uint64 (&amp;RETURN, ARG1, ARG0); 
            </source-template>
            <cleanup-template>
                BaseMpi_FreeInt64Array (RETURN); 
            </cleanup-template>
            <return-is-array>@COUNT_TYPE@</return-is-array>
        </operation>
        <operation return-type="int" name="rangesLength">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int" name="numRanges" />
            </operation-arguments>
            <source-template>int RETURN = ARG0 * 3;</source-template>
        </operation>
        <operation return-type="int*" name="rangesToArray">
            <extra-headers>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="int" name="n" />
                <operation-argument order="1" type="int**" name="ranges" />
            </operation-arguments>
            <source-template>
                int* RETURN = NULL; int RETURN_LEN = ARG0 * 3; if (ARG0) { RETURN = new int [RETURN_LEN]; for (int temp_rangesToArray_i = 0;
                temp_rangesToArray_i &lt; n; temp_rangesToArray_i++) { RETURN[temp_rangesToArray_i*3+0] = ARG1[temp_rangesToArray_i][0];
                RETURN[temp_rangesToArray_i*3+1] = ARG1[temp_rangesToArray_i][1]; RETURN[temp_rangesToArray_i*3+2] = ARG1[temp_rangesToArray_i][2]; } } 
            </source-template>
            <cleanup-template>
                if (RETURN) delete [] RETURN; RETURN = NULL; 
            </cleanup-template>
            <return-is-array>int</return-is-array>
        </operation>
        <operation return-type="int" name="getCartNumDims">
            <extra-headers>
                <header>BaseMpiHandling.h</header>
            </extra-headers>
            <operation-arguments>
                <operation-argument order="0" type="MPI_Comm" name="cartComm" />
            </operation-arguments>
            <source-template>int RETURN = BaseMPI_CommCartNumDims (ARG0);</source-template>
        </operation>
    </operations>
</analysis-specification>
