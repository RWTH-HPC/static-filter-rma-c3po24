<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE api-specification SYSTEM "@MUST_SPECIFICATION_DTD_PATH@/api-specification.dtd">
<api-specification unique-name="MPI">
	<api-headers><header>mpi.h</header></api-headers>
    <functions>
		@HAVE_MPI_WIN_ALLOCATE_PREFIX@
		<function name="MPI_Win_allocate" return-type="int">
			<function-arguments>
				<function-argument name="size" type="MPI_Aint" intent="in" order="0"></function-argument>
				<function-argument name="disp_unit" type="int" intent="in" order="1"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="2"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="3"></function-argument>
				<function-argument name="baseptr" type="void*" intent="in" order="4"></function-argument>
				<function-argument name="win" type="MPI_Win*" intent="out" order="5"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="WinTrack:addWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">getWinTypeAllocate</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="7">getMpiWinMemoryModel</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="5">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="MPI_Base" id="8">deref_winReturnBasePtr</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
							<call-arg-name>disp_unit</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RaceChecksList:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="TargetChecks:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:noTransfer" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Win_allocate</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
                        <operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>

                <operation order="pre" name="getWinTypeAllocate" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="deref_convertWin2int" order="post" id="9">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="deref_winReturnBasePtr" order="post" id="8">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>baseptr</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>size</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Resource" name="getMpiWinMemoryModel" order="post" id="7">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_disp_unit" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_baseptr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
                                <operation order="pre" name="getCollIdMPI_Win_allocate" group="MUST_CollectiveCondition" id="1">
                                    <operation-arguments />
                                </operation>

			</operations>
		</function>
		@HAVE_MPI_WIN_ALLOCATE_POSTFIX@
		@HAVE_MPI_WIN_ALLOCATE_SHARED_PREFIX@
		<function name="MPI_Win_allocate_shared" return-type="int">
			<function-arguments>
				<function-argument name="size" type="MPI_Aint" intent="in" order="0"></function-argument>
				<function-argument name="disp_unit" type="int" intent="in" order="1"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="2"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="3"></function-argument>
				<function-argument name="baseptr" type="void*" intent="in" order="4"></function-argument>
				<function-argument name="win" type="MPI_Win*" intent="out" order="5"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="WinTrack:addWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">getWinTypeAllocateShared</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="7">getMpiWinMemoryModel</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="4">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
							<op-name group="MPI_Base" id="8">deref_winReturnBasePtr</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
							<call-arg-name>disp_unit</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RaceChecksList:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="TargetChecks:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:noTransfer" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Win_allocate_shared</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>

			</analyses>
			<operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation order="pre" name="getWinTypeAllocateShared" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="deref_convertWin2int" order="post" id="9">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="deref_winReturnBasePtr" order="post" id="8">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>baseptr</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>size</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Resource" name="getMpiWinMemoryModel" order="post" id="7">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="getCollIdMPI_Win_allocate_shared" group="MUST_CollectiveCondition" id="1">
                    <operation-arguments />
                </operation>

				<operation group="MPI_Base" name="convertComm2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_disp_unit" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_baseptr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_ALLOCATE_SHARED_POSTFIX@
		@HAVE_MPI_WIN_ATTACH_PREFIX@
		<function name="MPI_Win_attach" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="base" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="size" type="MPI_Aint" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="WinTrack:attachWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="3">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="4">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="convertWin2int" order="post" id="2">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="3">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>base</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>size</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_base" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_ATTACH_POSTFIX@
		@HAVE_MPI_WIN_CALL_ERRHANDLER_PREFIX@
		<function name="MPI_Win_call_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="errorcode" type="int" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errorcode" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_CALL_ERRHANDLER_POSTFIX@
		@HAVE_MPI_WIN_COMPLETE_PREFIX@
		<function name="MPI_Win_complete" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="post" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="post" name="VectorClockWrapper:winComplete" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertWin2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RMATrack:winComplete" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="3">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
			<operations>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_COMPLETE_POSTFIX@
		@HAVE_MPI_WIN_CREATE_PREFIX@
		<function name="MPI_Win_create" return-type="int">
			<function-arguments>
				<function-argument name="base" type="void*" intent="in" order="0"></function-argument>
				<function-argument name="size" type="MPI_Aint" intent="in" order="1"></function-argument>
				<function-argument name="disp_unit" type="int" intent="in" order="2"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="3"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="4"></function-argument>
				<function-argument name="win" type="MPI_Win*" intent="out" order="5"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="WinTrack:addWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">getWinTypeCreate</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="7">getMpiWinMemoryModel</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="5">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
							<call-arg-name>base</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
							<call-arg-name>disp_unit</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="TargetChecks:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RaceChecksList:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:noTransfer" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Win_create</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="5">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation order="pre" name="getWinTypeCreate" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MPI_Base" name="deref_convertWin2int" order="post" id="9">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>size</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Resource" name="getMpiWinMemoryModel" order="post" id="7">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="getCollIdMPI_Win_create" group="MUST_CollectiveCondition" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="5">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_base" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_disp_unit" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_CREATE_POSTFIX@
		@HAVE_MPI_WIN_CREATE_DYNAMIC_PREFIX@
		<function name="MPI_Win_create_dynamic" return-type="int">
			<function-arguments>
				<function-argument name="info" type="MPI_Info" intent="in" order="0"></function-argument>
				<function-argument name="comm" type="MPI_Comm" intent="in" order="1"></function-argument>
				<function-argument name="win" type="MPI_Win*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="WinTrack:addWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">getWinTypeCreateDynamic</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="7">getMpiWinMemoryModel</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="2">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MUST_Resource" id="1">returnBottom</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
							<call-arg-name></call-arg-name>
                            <op-name group="MUST_Resource" id="1">return0</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="7">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RaceChecksList:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="TargetChecks:winCreate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation" analysis-arg-order="0">
                            <op-name group="MPI_Base" id="9">deref_convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:noTransfer" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Win_create_dynamic</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertComm2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>

			</analyses>
			<operations>
                <operation order="pre" name="getWinTypeCreateDynamic" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation order="pre" name="returnBottom" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation order="pre" name="return0" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="deref_convertWin2int" order="post" id="9">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MUST_Resource" name="getMpiWinMemoryModel" order="post" id="7">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation order="pre" name="getCollIdMPI_Win_create_dynamic" group="MUST_CollectiveCondition" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MPI_Base" name="convertComm2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>comm</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_comm" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_CREATE_DYNAMIC_POSTFIX@
		@HAVE_MPI_WIN_CREATE_ERRHANDLER_PREFIX@
		<function name="MPI_Win_create_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="function" type="MPI_Win_errhandler_function*" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="deref_convertErrhandler2int" order="post" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_function" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_CREATE_ERRHANDLER_POSTFIX@
		@HAVE_MPI_WIN_CREATE_KEYVAL_PREFIX@
		<function name="MPI_Win_create_keyval" return-type="int">
			<function-arguments>
				<function-argument name="win_copy_attr_fn" type="MPI_Win_copy_attr_function*" intent="in" order="0"></function-argument>
				<function-argument name="win_delete_attr_fn" type="MPI_Win_delete_attr_function*" intent="in" order="1"></function-argument>
				<function-argument name="win_keyval" type="int*" intent="out" order="2"></function-argument>
				<function-argument name="extra_state" type="void*" intent="in" order="3"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win_copy_attr_fn" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win_delete_attr_fn" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_win_keyval" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_extra_state" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_CREATE_KEYVAL_POSTFIX@
		@HAVE_MPI_WIN_DELETE_ATTR_PREFIX@
		<function name="MPI_Win_delete_attr" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="win_keyval" type="int" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win_keyval" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_DELETE_ATTR_POSTFIX@
		@HAVE_MPI_WIN_DETACH_PREFIX@
		<function name="MPI_Win_detach" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="base" type="const void*" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="WinTrack:detachWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="3">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="convertWin2int" order="post" id="2">
                    <operation-arguments>
                    <operation-argument op-arg-order="0">
                        <call-arg-name>win</call-arg-name>
                    </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="3">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>base</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_base" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_DETACH_POSTFIX@
		@HAVE_MPI_WIN_FENCE_PREFIX@
		<function name="MPI_Win_fence" return-type="int">
			<function-arguments>
				<function-argument name="assert" type="int" intent="in" order="0"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClockWrapper:tick" group="MUST_VectorClock">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="VectorClockWrapper:winAllToAll" group="MUST_VectorClock">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="1">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                                <analysis order="post" name="CollectiveCondition:noTransferWin" group="MUST_CollectiveCondition">
                                    <analysis-arguments>
                                        <analysis-argument type="operation-len" analysis-arg-order="0">
                                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation-len" analysis-arg-order="1">
                                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="2">
                                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Win_fence</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="3">
                                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="4">
                                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="5">
                                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                                        </analysis-argument>
                                    </analysis-arguments>
                                </analysis>
								<analysis order="pre" name="RMATrack:activeTargetCompletionAll" group="MUST_OneSidedChecks">
									<analysis-arguments>
                                        <analysis-argument type="operation-len" analysis-arg-order="0">
                                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation-len" analysis-arg-order="1">
                                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="2">
                                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                                        </analysis-argument>
										<analysis-argument type="operation-len" analysis-arg-order="3">
                            				<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        				</analysis-argument>
									</analysis-arguments>
								</analysis>
								<analysis order="pre" name="RMATrack:originCompletionAll" group="MUST_OneSidedChecks">
									<analysis-arguments>
                                        <analysis-argument type="operation-len" analysis-arg-order="0">
                                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation-len" analysis-arg-order="1">
                                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="2">
                                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                                        </analysis-argument>
										<analysis-argument type="operation" analysis-arg-order="3">
											<op-name group="MUST_Resource" id="1">return0</op-name>
										</analysis-argument>
										<analysis-argument type="operation-len" analysis-arg-order="4">
                            				<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        				</analysis-argument>
									</analysis-arguments>
								</analysis>
								<analysis order="pre" name="RMATrack:privateWindowUpdate" group="MUST_OneSidedChecks">
									<analysis-arguments>
                                        <analysis-argument type="operation-len" analysis-arg-order="0">
                                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation-len" analysis-arg-order="1">
                                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="2">
                                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                                        </analysis-argument>
									</analysis-arguments>
								</analysis>
								<analysis order="post" name="AppThrAnn:annotateHappensBefore" group="MUST_OneSidedChecks">
									<analysis-arguments>
										<analysis-argument type="operation-len" analysis-arg-order="0">
											<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
										</analysis-argument>
									</analysis-arguments>
								</analysis>
								<analysis order="post" name="RaceChecksList:winFence" group="MUST_OneSidedChecks">
									<analysis-arguments>
                                        <analysis-argument type="operation-len" analysis-arg-order="0">
                                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                                        </analysis-argument>
                                        <analysis-argument type="operation-len" analysis-arg-order="1">
                                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                                        </analysis-argument>
										<analysis-argument type="mapped" analysis-arg-order="2">
                            				<call-arg-name>assert</call-arg-name>
                        				</analysis-argument>
                                        <analysis-argument type="operation" analysis-arg-order="3">
                                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                                        </analysis-argument>
									</analysis-arguments>
								</analysis>
                            </analyses>
                            <operations>
								<operation order="pre" name="return0" group="MUST_Resource" id="1">
                    				<operation-arguments />
                				</operation>
                                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                                <operation order="pre" name="getCollIdMPI_Win_fence" group="MUST_CollectiveCondition" id="1">
                                    <operation-arguments />
                                </operation>

				<operation group="MUST_Base" name="buildArgumentId_1_assert" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FENCE_POSTFIX@
		@HAVE_MPI_WIN_FLUSH_PREFIX@
        <function name="MPI_Win_flush" return-type="int">
			<function-arguments>
				<function-argument name="rank" type="int" intent="in" order="0"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RMATrack:originCompletionRank" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_Resource" id="1">return0</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:passiveTargetCompletionRank" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation order="pre" name="return0" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FLUSH_POSTFIX@
		@HAVE_MPI_WIN_FLUSH_ALL_PREFIX@
		<function name="MPI_Win_flush_all" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RMATrack:originCompletionAll" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="1">return0</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="4">
                        	<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:passiveTargetCompletionAll" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="3">
                        	<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation order="pre" name="return0" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FLUSH_ALL_POSTFIX@
		@HAVE_MPI_WIN_FLUSH_LOCAL_PREFIX@
		<function name="MPI_Win_flush_local" return-type="int">
			<function-arguments>
				<function-argument name="rank" type="int" intent="in" order="0"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RMATrack:originCompletionRank" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FLUSH_LOCAL_POSTFIX@
		@HAVE_MPI_WIN_FLUSH_LOCAL_ALL_PREFIX@
		<function name="MPI_Win_flush_local_all" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RMATrack:originCompletionAll" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="4">
                        	<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
			<operations>
				<operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FLUSH_LOCAL_ALL_POSTFIX@
		@HAVE_MPI_WIN_FREE_PREFIX@
		<function name="MPI_Win_free" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win*" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
                        </analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="pre" name="WinTrack:freeWin" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="8">deref_convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="pre" name="CollectiveCondition:noTransferWin" group="MUST_CollectiveCondition">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_CollectiveCondition" id="1">getCollIdMPI_Win_free</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="8">deref_convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MUST_CollectiveCondition" id="1">hasNoRequest</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MUST_CollectiveCondition" id="1">fillRequestValue</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="VectorClockWrapper:winAllToAll" group="MUST_VectorClock">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="1">
                            <op-name group="MPI_Base" id="8">deref_convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MUST_CollectiveCondition" name="fillRequestValue" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation group="MUST_CollectiveCondition" name="hasNoRequest" order="pre" id="1">
                    <operation-arguments/>
                </operation>
                <operation order="pre" name="getCollIdMPI_Win_free" group="MUST_CollectiveCondition" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="deref_convertWin2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FREE_POSTFIX@
		@HAVE_MPI_WIN_FREE_KEYVAL_PREFIX@
		<function name="MPI_Win_free_keyval" return-type="int">
			<function-arguments>
				<function-argument name="win_keyval" type="int*" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win_keyval" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_FREE_KEYVAL_POSTFIX@
		@HAVE_MPI_WIN_GET_ATTR_PREFIX@
		<function name="MPI_Win_get_attr" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="win_keyval" type="int" intent="in" order="1"></function-argument>
				<function-argument name="attribute_val" type="void*" intent="out" order="2"></function-argument>
				<function-argument name="flag" type="int*" intent="out" order="3"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win_keyval" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_attribute_val" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_flag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_GET_ATTR_POSTFIX@
		@HAVE_MPI_WIN_GET_ERRHANDLER_PREFIX@
		<function name="MPI_Win_get_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="deref_convertErrhandler2int" order="post" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_GET_ERRHANDLER_POSTFIX@
		@HAVE_MPI_WIN_GET_GROUP_PREFIX@
		<function name="MPI_Win_get_group" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="group" type="MPI_Group*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="deref_convertGroup2int" order="post" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>group</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_GET_GROUP_POSTFIX@
		@HAVE_MPI_WIN_GET_INFO_PREFIX@
		<function name="MPI_Win_get_info" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="info_used" type="MPI_Info*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info_used" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_GET_INFO_POSTFIX@
		@HAVE_MPI_WIN_GET_NAME_PREFIX@
		<function name="MPI_Win_get_name" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="win_name" type="char*" intent="out" order="1"></function-argument>
				<function-argument name="resultlen" type="int*" intent="out" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win_name" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_resultlen" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_GET_NAME_POSTFIX@
		@HAVE_MPI_WIN_LOCK_PREFIX@
		<function name="MPI_Win_lock" return-type="int">
			<function-arguments>
				<function-argument name="lock_type" type="int" intent="in" order="0"></function-argument>
				<function-argument name="rank" type="int" intent="in" order="1"></function-argument>
				<function-argument name="assert" type="int" intent="in" order="2"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="3"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="VectorClockWrapper:tick" group="MUST_VectorClock">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="VectorClockWrapper:lock" group="MUST_VectorClock">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="1">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="3">
							<call-arg-name>lock_type</call-arg-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="AppThrAnn:winLock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>lock_type</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RMATrack:winLock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>lock_type</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="RMATrack:privateWindowUpdate" group="MUST_OneSidedChecks">
                    <analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="2">convertWin2int</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_lock_type" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_assert" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_LOCK_POSTFIX@
		@HAVE_MPI_WIN_LOCK_ALL_PREFIX@
		<function name="MPI_Win_lock_all" return-type="int">
			<function-arguments>
				<function-argument name="assert" type="int" intent="in" order="0"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_assert" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_LOCK_ALL_POSTFIX@
		@HAVE_MPI_WIN_POST_PREFIX@
		<function name="MPI_Win_post" return-type="int">
			<function-arguments>
				<function-argument name="group" type="MPI_Group" intent="in" order="0"></function-argument>
				<function-argument name="assert" type="int" intent="in" order="1"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClockWrapper:winPost" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="MPI_Base" id="2">convertWin2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RMATrack:winPost" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="4">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertGroup2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>group</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertWin2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_assert" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_POST_POSTFIX@
		@HAVE_MPI_WIN_SET_ATTR_PREFIX@
		<function name="MPI_Win_set_attr" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="win_keyval" type="int" intent="in" order="1"></function-argument>
				<function-argument name="attribute_val" type="void*" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win_keyval" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_attribute_val" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_SET_ATTR_POSTFIX@
		@HAVE_MPI_WIN_SET_ERRHANDLER_PREFIX@
		<function name="MPI_Win_set_errhandler" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="errhandler" type="MPI_Errhandler" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertErrhandler2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>errhandler</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_errhandler" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_SET_ERRHANDLER_POSTFIX@
		@HAVE_MPI_WIN_SET_INFO_PREFIX@
		<function name="MPI_Win_set_info" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="info" type="MPI_Info" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_info" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_SET_INFO_POSTFIX@
		@HAVE_MPI_WIN_SET_NAME_PREFIX@
		<function name="MPI_Win_set_name" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="win_name" type="const char*" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win_name" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_SET_NAME_POSTFIX@
		@HAVE_MPI_WIN_SHARED_QUERY_PREFIX@
		<function name="MPI_Win_shared_query" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="rank" type="int" intent="in" order="1"></function-argument>
				<function-argument name="size" type="MPI_Aint*" intent="out" order="2"></function-argument>
				<function-argument name="disp_unit" type="int*" intent="out" order="3"></function-argument>
				<function-argument name="baseptr" type="void*" intent="out" order="4"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_size" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_disp_unit" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_baseptr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_SHARED_QUERY_POSTFIX@
		@HAVE_MPI_WIN_START_PREFIX@
		<function name="MPI_Win_start" return-type="int">
			<function-arguments>
				<function-argument name="group" type="MPI_Group" intent="in" order="0"></function-argument>
				<function-argument name="assert" type="int" intent="in" order="1"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="2"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClockWrapper:winStart" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
							<op-name group="MPI_Base" id="1">convertWin2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="RMATrack:winStart" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertGroup2int</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="4">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertGroup2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>group</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_group" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_assert" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_START_POSTFIX@
		@HAVE_MPI_WIN_SYNC_PREFIX@
		<function name="MPI_Win_sync" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="RMATrack:privateWindowUpdate" group="MUST_OneSidedChecks">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="2">convertWin2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_SYNC_POSTFIX@
		@HAVE_MPI_WIN_TEST_PREFIX@
		<function name="MPI_Win_test" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
				<function-argument name="flag" type="int*" intent="out" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_flag" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_TEST_POSTFIX@
		@HAVE_MPI_WIN_UNLOCK_PREFIX@
		<function name="MPI_Win_unlock" return-type="int">
			<function-arguments>
				<function-argument name="rank" type="int" intent="in" order="0"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="1"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="VectorClockWrapper:tick" group="MUST_VectorClock">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="VectorClockWrapper:unlock" group="MUST_VectorClock">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="1">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanSyncClockRecorder:storeSyncClock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="AppThrAnn:winUnlock" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="RMATrack:originCompletionRank" group="MUST_OneSidedChecks">
                    <analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
							<op-name group="MUST_Resource" id="1">return0</op-name>
						</analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="RMATrack:passiveTargetCompletionRank" group="MUST_OneSidedChecks">
                    <analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="2">
                            <call-arg-name>rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="2">convertWin2int</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="post" name="AppThrAnn:annotateHappensBefore" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
            </analyses>
            <operations>
			    <operation order="pre" name="return0" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="2">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_UNLOCK_POSTFIX@
		@HAVE_MPI_WIN_UNLOCK_ALL_PREFIX@
		<function name="MPI_Win_unlock_all" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="post" name="RMATrack:originCompletionAll" group="MUST_OneSidedChecks">
                    <analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertWin2int</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MUST_Resource" id="1">return0</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="4">
                        	<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:passiveTargetCompletionAll" group="MUST_OneSidedChecks">
                    <analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertWin2int</op-name>
						</analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="3">
                        	<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
				<operation order="pre" name="return0" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_UNLOCK_ALL_POSTFIX@
		@HAVE_MPI_WIN_WAIT_PREFIX@
		<function name="MPI_Win_wait" return-type="int">
			<function-arguments>
				<function-argument name="win" type="MPI_Win" intent="in" order="0"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="post" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="post" name="VectorClockWrapper:winWait" group="MUST_VectorClock">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation" analysis-arg-order="2">
							<op-name group="MPI_Base" id="1">convertWin2int</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RMATrack:winWait" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">convertWin2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="3">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="1">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_WIN_WAIT_POSTFIX@
		@HAVE_MPI_GET_PREFIX@
		<function name="MPI_Get" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="5"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="RMATrack:addGetOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

                <operation group="MPI_Base" name="convertWin2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_GET_POSTFIX@
		@HAVE_MPI_GET_ACCUMULATE_PREFIX@
		<function name="MPI_Get_accumulate" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="result_addr" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="result_count" type="int" intent="in" order="4"></function-argument>
				<function-argument name="result_datatype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="6"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="7"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="8"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="9"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="10"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="11"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="RMATrack:addGetAccumulateOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="6">
                            <call-arg-name>result_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="7">
                            <op-name group="MPI_Base" id="6">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="8">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="10">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="10">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="11">
                            <op-name group="MPI_Base" id="10">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="12">
                            <op-name group="MPI_Base" id="11">convertOp2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="13">
                            <op-name group="MPI_Base" id="12">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="14">
                            <op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="15">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>result_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

                <operation group="MPI_Base" name="convertWin2int" order="pre" id="12">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>result_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="10">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

				<operation group="MPI_Base" name="convertOp2int" order="pre" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_result_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_result_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_result_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_12_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_GET_ACCUMULATE_POSTFIX@
		@HAVE_MPI_RGET_PREFIX@
		<function name="MPI_Rget" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="5"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RequestTrack:addActive" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:addGetOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_RGET_POSTFIX@
		@HAVE_MPI_RGET_ACCUMULATE_PREFIX@
		<function name="MPI_Rget_accumulate" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="result_addr" type="void*" intent="in" order="3"></function-argument>
				<function-argument name="result_count" type="int" intent="in" order="4"></function-argument>
				<function-argument name="result_datatype" type="MPI_Datatype" intent="in" order="5"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="6"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="7"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="8"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="9"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="10"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="11"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="12"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RequestTrack:addActive" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="13">deref_convertRequest2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:addGetAccumulateOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="5">
                            <op-name group="MPI_Base" id="4">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="6">
                            <call-arg-name>result_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="7">
                            <op-name group="MPI_Base" id="6">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="8">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="10">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="10">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="11">
                            <op-name group="MPI_Base" id="10">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="12">
                            <op-name group="MPI_Base" id="11">convertOp2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="13">
                            <op-name group="MPI_Base" id="12">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="14">
                            <op-name group="MPI_Base" id="13">deref_convertRequest2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="15">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="getAddress" order="pre" id="4">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>result_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>result_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="10">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="11">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="13">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="12">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_result_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_result_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_result_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_11_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_12_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_13_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_RGET_ACCUMULATE_POSTFIX@
		@HAVE_MPI_PUT_PREFIX@
		<function name="MPI_Put" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="5"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="7"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="RMATrack:addPutOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_PUT_POSTFIX@
		@HAVE_MPI_RPUT_PREFIX@
		<function name="MPI_Rput" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="5"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="7"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RequestTrack:addActive" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:addPutOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MPI_Base" id="9">deref_convertRequest2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="11">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

                <operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_RPUT_POSTFIX@
		@HAVE_MPI_ACCUMULATE_PREFIX@
		<function name="MPI_Accumulate" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="5"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="7"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="8"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="pre" name="RMATrack:addAccumulateOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertOp2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MPI_Base" id="9">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="11">
                            <op-name group="MUST_OneSidedChecks" id="1">return0</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="12">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>

                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>

				<operation group="MPI_Base" name="convertOp2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MUST_OneSidedChecks" name="return0" order="pre" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_ACCUMULATE_POSTFIX@
		@HAVE_MPI_RACCUMULATE_PREFIX@
		<function name="MPI_Raccumulate" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="origin_count" type="int" intent="in" order="1"></function-argument>
				<function-argument name="origin_datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="target_count" type="int" intent="in" order="5"></function-argument>
				<function-argument name="target_datatype" type="MPI_Datatype" intent="in" order="6"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="7"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="8"></function-argument>
				<function-argument name="request" type="MPI_Request*" intent="out" order="9"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitTSanSyncClock:init" group="MUST_TSan_Annotations">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
                <analysis order="post" name="RequestTrack:addActive" group="MUST_Resource">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
                            <op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation-len" analysis-arg-order="1">
                            <op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MUST_Resource" id="1">return1</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="3">
                            <op-name group="MPI_Base" id="10">deref_convertRequest2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="4">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
				<analysis order="pre" name="TSanInterceptor:tick" group="MUST_TSanInterceptor">
                    <analysis-arguments></analysis-arguments>
                </analysis>
				<analysis order="pre" name="VectorClock:tick" group="GTI_IMPLICIT">
                    <analysis-arguments></analysis-arguments>
                </analysis>
                <analysis order="post" name="RMATrack:addAccumulateOperation" group="MUST_OneSidedChecks">
                    <analysis-arguments>
                        <analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="2">
                            <op-name group="MPI_Base" id="1">getAddress</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="3">
                            <call-arg-name>origin_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="4">
                            <op-name group="MPI_Base" id="3">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="5">
                            <call-arg-name>target_rank</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="6">
                            <op-name group="MPI_Base" id="7">convertAint2uint64</op-name>
                        </analysis-argument>
                        <analysis-argument type="mapped" analysis-arg-order="7">
                            <call-arg-name>target_count</call-arg-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="8">
                            <op-name group="MPI_Base" id="7">convertDatatype2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="9">
                            <op-name group="MPI_Base" id="8">convertOp2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="10">
                            <op-name group="MPI_Base" id="9">convertWin2int</op-name>
                        </analysis-argument>
                        <analysis-argument type="operation" analysis-arg-order="11">
                            <op-name group="MPI_Base" id="10">deref_convertRequest2int</op-name>
                        </analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="12">
                            <op-name group="MUST_TSan_Annotations" id="1">provideTSanSyncClockStorage</op-name>
                        </analysis-argument>
                    </analysis-arguments>
                </analysis>
			</analyses>
			<operations>
                <operation group="MPI_Base" name="getAddress" order="pre" id="1">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>origin_addr</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>origin_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="7">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>target_datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="convertAint2uint64" group="MPI_Base" id="7">
                    <operation-arguments>
                        <operation-argument op-arg-order="0">
                            <call-arg-name>target_disp</call-arg-name>
                        </operation-argument>
                    </operation-arguments>
                </operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="8">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="deref_convertRequest2int" order="post" id="10">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>request</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_TSan_Annotations" name="provideTSanSyncClockStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
                <operation group="MPI_Base" name="convertWin2int" order="pre" id="9">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>win</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
                <operation order="pre" name="return1" group="MUST_Resource" id="1">
                    <operation-arguments />
                </operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_origin_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_origin_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_count" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_target_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_8_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_9_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_10_request" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_RACCUMULATE_POSTFIX@
		@HAVE_MPI_FETCH_AND_OP_PREFIX@
		<function name="MPI_Fetch_and_op" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="result_addr" type="void*" intent="in" order="1"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="2"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="3"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="4"></function-argument>
				<function-argument name="op" type="MPI_Op" intent="in" order="5"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="6"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="3">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MPI_Base" name="convertOp2int" order="pre" id="6">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>op</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_result_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_op" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_FETCH_AND_OP_POSTFIX@
		@HAVE_MPI_COMPARE_AND_SWAP_PREFIX@
		<function name="MPI_Compare_and_swap" return-type="int">
			<function-arguments>
				<function-argument name="origin_addr" type="const void*" intent="in" order="0"></function-argument>
				<function-argument name="compare_addr" type="const void*" intent="in" order="1"></function-argument>
				<function-argument name="result_addr" type="void*" intent="in" order="2"></function-argument>
				<function-argument name="datatype" type="MPI_Datatype" intent="in" order="3"></function-argument>
				<function-argument name="target_rank" type="int" intent="in" order="4"></function-argument>
				<function-argument name="target_disp" type="MPI_Aint" intent="in" order="5"></function-argument>
				<function-argument name="win" type="MPI_Win" intent="in" order="6"></function-argument>
			</function-arguments>
			<analyses>
				<analysis order="pre" name="InitParallelId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="InitLocationId:init" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="1">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</analysis-argument>
						<analysis-argument type="mapped" analysis-arg-order="2">
							<call-arg-name>USE_CALLID</call-arg-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
				<analysis order="pre" name="MessageReproducer:testForMatch" group="MUST_Base">
					<analysis-arguments>
						<analysis-argument type="operation-len" analysis-arg-order="0">
							<op-name group="MUST_Base" id="1">provideParallelIdStorage</op-name>
						</analysis-argument>
						<analysis-argument type="operation-len" analysis-arg-order="1">
							<op-name group="MUST_Base" id="1">provideLocationIdStorage</op-name>
						</analysis-argument>
					</analysis-arguments>
				</analysis>
			</analyses>
			<operations>
				<operation group="MPI_Base" name="convertDatatype2int" order="pre" id="4">
					<operation-arguments>
					<operation-argument op-arg-order="0">
						<call-arg-name>datatype</call-arg-name>
					</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideLocationIdStorage" order="pre" id="1">
					<operation-arguments>
						<operation-argument op-arg-order="0">
							<call-arg-name>USE_CALLNAME</call-arg-name>
						</operation-argument>
						<operation-argument op-arg-order="1">
							<call-arg-name>USE_CALLID</call-arg-name>
						</operation-argument>
					</operation-arguments>
				</operation>
				<operation group="MUST_Base" name="provideParallelIdStorage" order="pre" id="1">
					<operation-arguments />
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_1_origin_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_2_compare_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_3_result_addr" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_4_datatype" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_5_target_rank" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_6_target_disp" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
				<operation group="MUST_Base" name="buildArgumentId_7_win" order="pre" id="1">
					<operation-arguments></operation-arguments>
				</operation>
			</operations>
		</function>
		@HAVE_MPI_COMPARE_AND_SWAP_POSTFIX@
	</functions>
</api-specification>
