<?xml version="1.0" encoding="UTF-8"?>
<jube>  
  <include-path>
    <path>../../common</path>
    <path>../../platform/CLAIX-23</path>
  </include-path>

  <benchmark name="BT-RMA" outpath="BT-RMA.benchmarks">
    <!-- 
      #BT-RMA Configuration 
    -->
    <parameterset name="config">
      <!-- Synchronization -->
      <parameter name="SOLVER">FENCE</parameter> <!-- Possible values:  FENCE, GATS-->
      <parameter name="EXCHG">FENCE</parameter> <!-- Possible values:  FENCE, GATS_SINGLE, GATS_MULTI-->

      <!-- Custom input value, used if tag C is set or none of the following: S, M, L -->
      <parameter name="CLASS" tag="C|(!S+!M+!L)">A</parameter>
      
      <!-- Preset inputs -->
      <parameter name="CLASS" tag="S">A</parameter> 
      <parameter name="CLASS" tag="M">B</parameter> 
      <parameter name="CLASS" tag="L">C</parameter>    
    </parameterset>    
    <!-- 
      source directory 
    -->  
    <parameterset name="source"  init_with="defaults.xml">
      <!-- <parameter name="path_to_source" type="string">${jube_benchmark_home}/../../../npb</parameter> -->
      <parameter name="path_to_source" type="string">${jube_benchmark_home}/npb</parameter>  <!-- - - - - - - - - - -  Path to the source folder       --> 
    </parameterset> 
    <!-- 
      #Fetching system settings       
      #Here you can add or change parameters to fit this specific benchmark
    -->
    <parameterset name="platform_specs_pset" init_with="system_settings.xml">
      <parameter name="application_tasks" type="int">36</parameter>       <!-- - - - - - - - - - - - - - - - -  tasks has to be N^2           -->
      <parameter name="threads" type="int">1</parameter>   <!-- - - - - - - - - - - - - - - - -  Threads                       -->
      <parameter name="taskspernode" type="int">48</parameter> <!-- - - - - - - - - - - - - - - - -  Tasks per node           -->
      <parameter name="timelimit">00:40:00</parameter>
      <parameter name="args_exec"></parameter>
      <parameter name="ERROR_tasks_msg" type="string" separator="!NONE!">tasks ($application_tasks) need to be square number (N^2), e.g., 1, 4, 9, 16 etc.</parameter>
      <parameter name="ERROR_tasks" mode="python">
      print(
        '\n[\033[91m\033[1m'+'ERROR'+'\033[0m'+'] in step \033[1m${jube_step_name} (${jube_wp_id})\033[0m:\n'+
        '        $ERROR_tasks_msg'
        ) or 'ERR' if round($application_tasks**(1/2))**2 != $application_tasks else 'OK'
      </parameter>
    </parameterset>    
    <parameterset name="execute_pset" init_with="system_settings.xml"></parameterset>  
    <parameterset name="toolchain_env_pset" init_with="system_settings.xml">
        <!-- <parameter name="compiler_name">clang</parameter>      - - - - - - - - - - - - - - - -  Compiler               -->
        <!-- <parameter name="compiler_version">13.0.1</parameter>  - - - - - - - - - - - - - - - -  Compiler Version       -->
        <!-- <parameter name="mpi_name">openmpi</parameter>         - - - - - - - - - - - - - - - -  MPI                    -->
        <!-- <parameter name="mpi_version">2022a</parameter>        - - - - - - - - - - - - - - - -  MPI Version            -->
    </parameterset>
    <parameterset name="compile_pset" init_with="system_settings.xml">
      <parameter name="compile_target" type="string">bt-rma</parameter> <!-- - - - - - - -  Makefile target for compilation -->
      <parameter name="executable_name">${compile_target}.${CLASS}.x</parameter> <!-- - - - - - - - - - -  Name of the executable       --> 
      <!-- RMA is used by default -->
      <parameter name="RMA_target" type="string"></parameter>
      <parameter name="export_flags" separator="!NONE!" mode="python"> <!-- Environment variables for compilation with tsan -->
        {"base": 'MPIFC="mpif90-flang" FFLAGS="-g"',
        "tsan": 'MPIFC="${MUSTFC}" FFLAGS="--wrap-target mpif90-flang -g ${must_stats_compile_flags}" FLINKFLAGS="-g --wrap-target mpif90-flang ${must_stats_compile_flags}"',
        "tsan-opt": 'MPIFC="${MUSTFC}" FFLAGS="--wrap-target mpif90-flang --optimizations ${must_compile_opt} -g ${must_stats_compile_flags}" FLINKFLAGS="-g --wrap-target mpif90-flang --optimizations ${must_compile_opt} ${must_stats_compile_flags}"'}.get("${compile_mode}", 0)
      </parameter> 
    </parameterset>
    <parameterset name="module_env_pset" init_with="system_settings.xml"></parameterset>
    <parameterset name="mpirun_env_pset" init_with="system_settings.xml"></parameterset>
    <parameterset name="export_env_pset" init_with="system_settings.xml"></parameterset>

    <!-- Regex patternsets -->
    <patternset name="pattern" init_with="defaults.xml:pattern">
      <pattern name="time" type="float">Time in seconds = .* ${jube_pat_fp}</pattern>
      <pattern name="verification">Verification .*= .* ([a-zA-Z]*)$</pattern>
    </patternset>
    <!-- Load filesets -->
    <fileset name="source_files" init_with="system_settings.xml"></fileset>
    <fileset name="job_files" init_with="system_settings.xml"></fileset> <!-- Slurm -->
    <!-- Load substituteset -->
    <substituteset name="job_sub" init_with="system_settings.xml"></substituteset> <!-- Slurm -->
    <!-- Load steps -->
    <include from="must.xml" path="step" /> <!-- Must -->
    <include from="defaults.xml" path="step" />
    <!-- Compile step -->
    <step name="compile" depend="copy_source" suffix="${compile_mode}">
      <use>config</use>
      <include from="defaults.xml" path="compile_psets/use" />
      <!-- Compile executable -->
      <do active="${do_compile}">      
        cd copy_source/;
        ${load_modules};
        ${export};
        ${compile_export};
        <!-- COMPILE INSTRUCTIONS START -->
        export ${export_flags};
        make clean;
        
        SYNCTYPE="-DSOLVER_${SOLVER} -DEXCHG_${EXCHG}" ${time_measure_command} make -e ${compile_target} CLASS=${CLASS};
        <!-- COMPILE INSTRUCTIONS END --> 
        <!-- Caching executable -->
        mkdir -p ${benchmark_build_dir};
        mv -f ./bin/${executable_name} ${benchmark_build_dir}/${executable_full_name};
      </do>      
      <!-- Copying cached executable -->
      <do>
        cp -f ${benchmark_build_dir}/${executable_full_name} .;
      </do>
    </step>
    <!-- Execute step -->
    <step name="execute" depend="compile" suffix="${compile_mode}_${measurement_mode}" active="not ${ignorelist}" iterations="5">
      <include from="defaults.xml" path="execute_psets/use" />
      <do done_file="${done_file}" error_file="${error_file}">
        if [[ "$ERROR_tasks" == "ERR" ]]; then &gt;&amp;2 echo "$ERROR_tasks_msg"; exit 1; fi
        $submit $submit_script
      </do>
    </step>       
    <!-- Load analyser -->
    <include from="defaults.xml" path="analyser"/>
    <!-- Load result -->
    <!-- <include from="defaults.xml" path="result"/> -->
    <result>
      <use>analyse</use>
      <table name="result_csv" style="csv" separator=";" sort="CLASS, tasks,compile_mode,measurement_mode,jube_wp_id">
        <include from="defaults.xml" path="columns/column" />
        <column>CLASS</column>
        <column>SOLVER</column>
        <column>EXCHG</column>
        <column>time_avg</column>
        <column>time_std</column>
        <column>verification</column>
      </table>
      <table name="result" style="pretty" sort="CLASS, tasks,compile_mode,measurement_mode,jube_wp_id">
        <include from="defaults.xml" path="columns/column" />
        <column>CLASS</column>
        <column>SOLVER</column>
        <column>EXCHG</column>
        <column format=".3f">time_avg</column>
        <column format=".3f">time_std</column>
        <column>verification</column>
      </table>
    </result>

    <!-- Use additional features -->
    <include from="includes.xml" path="includes/include"/>
  </benchmark>
</jube>